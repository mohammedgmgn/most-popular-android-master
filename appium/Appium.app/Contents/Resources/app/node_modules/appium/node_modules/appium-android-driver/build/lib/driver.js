"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _index = _interopRequireDefault(require("./commands/index"));

var _androidHelpers = require("./android-helpers");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumAdb = require("appium-adb");

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _sharedPreferencesBuilder = require("shared-preferences-builder");

var _bluebird = _interopRequireDefault(require("bluebird"));

const APP_EXTENSION = '.apk';
const DEVICE_PORT = 4724;
const NO_PROXY = [['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/touch/perform')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')], ['POST', new RegExp('^/session/[^/]+/orientation')], ['GET', new RegExp('^/session/[^/]+/orientation')]];

class AndroidDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['xpath', 'id', 'class name', 'accessibility id', '-android uiautomator'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.sessionChromedrivers = {};
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = _lodash.default.clone(NO_PROXY);
    this.settings = new _appiumBaseDriver.DeviceSettings({
      ignoreUnimportantViews: false
    }, this.onSettingsUpdate.bind(this));
    this.chromedriver = null;
    this.apkStrings = {};
    this.bootstrapPort = opts.bootstrapPort || DEVICE_PORT;
    this.unlocker = _androidHelpers.helpers.unlocker;

    for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      AndroidDriver.prototype[cmd] = fn;
    }

    this.curContext = this.defaultContextName();
  }

  async createSession(...args) {
    try {
      let [sessionId, caps] = await super.createSession(...args);
      let serverDetails = {
        platform: 'LINUX',
        webStorageEnabled: false,
        takesScreenshot: true,
        javascriptEnabled: true,
        databaseEnabled: false,
        networkConnectionEnabled: true,
        locationContextEnabled: false,
        warnings: {},
        desired: this.caps
      };
      this.caps = Object.assign(serverDetails, this.caps);
      let defaultOpts = {
        action: 'android.intent.action.MAIN',
        category: 'android.intent.category.LAUNCHER',
        flags: '0x10200000',
        disableAndroidWatchers: false,
        tmpDir: await _appiumSupport.tempDir.staticDir(),
        fullReset: false,
        autoLaunch: true,
        adbPort: _appiumAdb.DEFAULT_ADB_PORT,
        androidInstallTimeout: 90000
      };

      _lodash.default.defaults(this.opts, defaultOpts);

      this.useUnlockHelperApp = _lodash.default.isUndefined(this.caps.unlockType);

      if (this.opts.noReset === true) {
        this.opts.fullReset = false;
      }

      if (this.opts.fullReset === true) {
        this.opts.noReset = false;
      }

      this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
      this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

      if (this.isChromeSession) {
        _logger.default.info("We're going to run a Chrome-based session");

        let {
          pkg,
          activity
        } = _androidHelpers.helpers.getChromePkg(this.opts.browserName);

        this.opts.appPackage = pkg;
        this.opts.appActivity = activity;

        _logger.default.info(`Chrome-type package and activity are ${pkg} and ${activity}`);
      }

      if (this.opts.nativeWebScreenshot) {
        this.jwpProxyAvoid.push(['GET', new RegExp('^/session/[^/]+/screenshot')]);
      }

      if (this.opts.reboot) {
        this.setAvdFromCapabilities(caps);
      }

      let {
        udid,
        emPort
      } = await _androidHelpers.helpers.getDeviceInfoFromCaps(this.opts);
      this.opts.udid = udid;
      this.opts.emPort = emPort;
      this.adb = await _androidHelpers.helpers.createADB({
        udid: this.opts.udid,
        emPort: this.opts.emPort,
        adbPort: this.opts.adbPort,
        suppressKillServer: this.opts.suppressKillServer,
        remoteAdbHost: this.opts.remoteAdbHost,
        clearDeviceLogsOnStart: this.opts.clearDeviceLogsOnStart,
        adbExecTimeout: this.opts.adbExecTimeout
      });

      if ((await this.adb.getApiLevel()) >= 23) {
        _logger.default.warn("Consider setting 'automationName' capability to " + "'uiautomator2' on Android >= 6, since UIAutomator framework " + 'is not maintained anymore by the OS vendor.');
      }

      if (this.helpers.isPackageOrBundle(this.opts.app)) {
        this.opts.appPackage = this.opts.app;
        this.opts.app = null;
      }

      if (this.opts.app) {
        this.opts.app = await this.helpers.configureApp(this.opts.app, APP_EXTENSION);
        this.opts.appIsTemp = this.opts.app && (await _appiumSupport.fs.exists(this.opts.app)) && !(await _appiumSupport.util.isSameDestination(caps.app, this.opts.app));
        await this.checkAppPresent();
      } else if (this.appOnDevice) {
        _logger.default.info(`App file was not listed, instead we're going to run ` + `${this.opts.appPackage} directly on the device`);

        await this.checkPackagePresent();
      }

      if (_appiumSupport.util.hasValue(this.opts.networkSpeed)) {
        if (!this.isEmulator()) {
          _logger.default.warn('Sorry, networkSpeed capability is only available for emulators');
        } else {
          let networkSpeed = _androidHelpers.helpers.ensureNetworkSpeed(this.adb, this.opts.networkSpeed);

          await this.adb.networkSpeed(networkSpeed);
        }
      }

      if (_appiumSupport.util.hasValue(this.opts.gpsEnabled)) {
        if (this.isEmulator()) {
          _logger.default.info(`Trying to ${this.opts.gpsEnabled ? 'enable' : 'disable'} gps location provider`);

          await this.adb.toggleGPSLocationProvider(this.opts.gpsEnabled);
        } else {
          _logger.default.warn('Sorry! gpsEnabled capability is only available for emulators');
        }
      }

      await this.startAndroidSession(this.opts);
      return [sessionId, this.caps];
    } catch (e) {
      try {
        await this.deleteSession();
      } catch (ign) {}

      throw e;
    }
  }

  isEmulator() {
    return !!(this.opts.avd || /emulator/.test(this.opts.udid));
  }

  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      _logger.default.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        _logger.default.errorAndThrow('avd or deviceName should be specified when reboot option is enables');
      }

      if (!caps.platformVersion) {
        _logger.default.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }

      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, '-');
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }

  get appOnDevice() {
    return this.helpers.isPackageOrBundle(this.opts.app) || !this.opts.app && this.helpers.isPackageOrBundle(this.opts.appPackage);
  }

  get isChromeSession() {
    return _androidHelpers.helpers.isChromeBrowser(this.opts.browserName);
  }

  async onSettingsUpdate(key, value) {
    if (key === 'ignoreUnimportantViews') {
      await this.setCompressedLayoutHierarchy(value);
    }
  }

  async startAndroidSession() {
    _logger.default.info(`Starting Android session`);

    this.defaultIME = await _androidHelpers.helpers.initDevice(this.adb, this.opts);
    this.caps.deviceName = this.adb.curDeviceId;
    this.caps.deviceUDID = this.opts.udid;
    this.caps.platformVersion = await this.adb.getPlatformVersion();
    this.caps.deviceScreenSize = await this.adb.getScreenSize();
    this.caps.deviceModel = await this.adb.getModel();
    this.caps.deviceManufacturer = await this.adb.getManufacturer();

    if (this.opts.disableWindowAnimation) {
      if (await this.adb.isAnimationOn()) {
        if ((await this.adb.getApiLevel()) >= 28) {
          _logger.default.warn('Relaxing hidden api policy to manage animation scale');

          await this.adb.setHiddenApiPolicy('1');
        }

        _logger.default.info('Disabling window animation as it is requested by "disableWindowAnimation" capability');

        await this.adb.setAnimationState(false);
        this._wasWindowAnimationDisabled = true;
      } else {
        _logger.default.info('Window animation is already disabled');
      }
    }

    if (this.opts.autoLaunch) {
      await this.initAUT();
    }

    this.bootstrap = new _androidHelpers.helpers.bootstrap(this.adb, this.bootstrapPort, this.opts.websocket);
    await this.bootstrap.start(this.opts.appPackage, this.opts.disableAndroidWatchers, this.opts.acceptSslCerts);
    this.bootstrap.onUnexpectedShutdown.catch(async err => {
      if (!this.bootstrap.ignoreUnexpectedShutdown) {
        await this.startUnexpectedShutdown(err);
      }
    });

    if (!this.opts.skipUnlock) {
      await _androidHelpers.helpers.unlock(this, this.adb, this.caps);
    }

    if (this.opts.ignoreUnimportantViews) {
      await this.settings.update({
        ignoreUnimportantViews: this.opts.ignoreUnimportantViews
      });
    }

    if (this.isChromeSession) {
      await this.startChromeSession();
    } else {
      if (this.opts.autoLaunch) {
        await this.startAUT();
      }
    }

    if (_appiumSupport.util.hasValue(this.opts.orientation)) {
      _logger.default.debug(`Setting initial orientation to '${this.opts.orientation}'`);

      await this.setOrientation(this.opts.orientation);
    }

    await this.initAutoWebview();
  }

  async initAutoWebview() {
    if (this.opts.autoWebview) {
      let viewName = this.defaultWebviewName();
      let timeout = this.opts.autoWebviewTimeout || 2000;

      _logger.default.info(`Setting auto webview to context '${viewName}' with timeout ${timeout}ms`);

      await (0, _asyncbox.retryInterval)(timeout / 500, 500, async () => {
        await this.setContext(viewName);
      });
    }
  }

  async initAUT() {
    let launchInfo = await _androidHelpers.helpers.getLaunchInfo(this.adb, this.opts);
    Object.assign(this.opts, launchInfo);
    Object.assign(this.caps, launchInfo);

    if (this.opts.uninstallOtherPackages) {
      _androidHelpers.helpers.validateDesiredCaps(this.opts);

      await _androidHelpers.helpers.uninstallOtherPackages(this.adb, _androidHelpers.helpers.parseArray(this.opts.uninstallOtherPackages), [_androidHelpers.SETTINGS_HELPER_PKG_ID]);
    }

    if (this.opts.otherApps) {
      let otherApps;

      try {
        otherApps = _androidHelpers.helpers.parseArray(this.opts.otherApps);
      } catch (e) {
        _logger.default.errorAndThrow(`Could not parse "otherApps" capability: ${e.message}`);
      }

      otherApps = await _bluebird.default.all(otherApps.map(app => this.helpers.configureApp(app, APP_EXTENSION)));
      await _androidHelpers.helpers.installOtherApks(otherApps, this.adb, this.opts);
    }

    if (!this.opts.app) {
      if (this.opts.fullReset) {
        _logger.default.errorAndThrow('Full reset requires an app capability, use fastReset if app is not provided');
      }

      _logger.default.debug('No app capability. Assuming it is already on the device');

      if (this.opts.fastReset) {
        await _androidHelpers.helpers.resetApp(this.adb, this.opts);
      }

      return;
    }

    if (!this.opts.skipUninstall) {
      await this.adb.uninstallApk(this.opts.appPackage);
    }

    await _androidHelpers.helpers.installApk(this.adb, this.opts);
    const apkStringsForLanguage = await _androidHelpers.helpers.pushStrings(this.opts.language, this.adb, this.opts);

    if (this.opts.language) {
      this.apkStrings[this.opts.language] = apkStringsForLanguage;
    }

    if (!_lodash.default.isUndefined(this.opts.sharedPreferences)) {
      await this.setSharedPreferences(this.opts);
    }
  }

  async checkAppPresent() {
    _logger.default.debug('Checking whether app is actually present');

    if (!(await _appiumSupport.fs.exists(this.opts.app))) {
      _logger.default.errorAndThrow(`Could not find app apk at ${this.opts.app}`);
    }
  }

  async checkPackagePresent() {
    _logger.default.debug('Checking whether package is present on the device');

    if (!(await this.adb.shell(['pm', 'list', 'packages', this.opts.appPackage]))) {
      _logger.default.errorAndThrow(`Could not find package ${this.opts.appPackage} on the device`);
    }
  }

  async setCompressedLayoutHierarchy(compress) {
    await this.bootstrap.sendAction('compressedLayoutHierarchy', {
      compressLayout: compress
    });
  }

  async deleteSession() {
    _logger.default.debug('Shutting down Android driver');

    await _androidHelpers.helpers.removeAllSessionWebSocketHandlers(this.server, this.sessionId);
    await super.deleteSession();

    if (this.bootstrap) {
      await this.stopChromedriverProxies();

      if (this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME) {
        _logger.default.debug(`Resetting IME to ${this.defaultIME}`);

        await this.adb.setIME(this.defaultIME);
      }

      if (!this.isChromeSession) {
        await this.adb.forceStop(this.opts.appPackage);
      }

      await this.adb.goToHome();

      if (this.opts.fullReset && !this.opts.skipUninstall && !this.appOnDevice) {
        await this.adb.uninstallApk(this.opts.appPackage);
      }

      await this.bootstrap.shutdown();
      this.bootstrap = null;
    } else {
      _logger.default.debug("Called deleteSession but bootstrap wasn't active");
    }

    await this.adb.stopLogcat();

    if (this.useUnlockHelperApp) {
      await this.adb.forceStop('io.appium.unlock');
    }

    if (this._wasWindowAnimationDisabled) {
      _logger.default.info('Restoring window animation state');

      await this.adb.setAnimationState(true);

      if ((await this.adb.getApiLevel()) >= 28) {
        _logger.default.info('Restoring hidden api policy to the device default configuration');

        await this.adb.setDefaultHiddenApiPolicy();
      }
    }

    if (this.opts.reboot) {
      let avdName = this.opts.avd.replace('@', '');

      _logger.default.debug(`closing emulator '${avdName}'`);

      await this.adb.killEmulator(avdName);
    }

    if (this.opts.clearSystemFiles) {
      if (this.opts.appIsTemp) {
        _logger.default.debug(`Temporary copy of app was made: deleting '${this.opts.app}'`);

        try {
          await _appiumSupport.fs.rimraf(this.opts.app);
        } catch (err) {
          _logger.default.warn(`Unable to delete temporary app: ${err.message}`);
        }
      } else {
        _logger.default.debug('App was not copied, so not deleting');
      }
    } else {
      _logger.default.debug('Not cleaning generated files. Add `clearSystemFiles` capability if wanted.');
    }
  }

  async setSharedPreferences() {
    let sharedPrefs = this.opts.sharedPreferences;

    _logger.default.info('Trying to set shared preferences');

    let name = sharedPrefs.name;

    if (_lodash.default.isUndefined(name)) {
      _logger.default.warn(`Skipping setting Shared preferences, name is undefined: ${JSON.stringify(sharedPrefs)}`);

      return false;
    }

    let remotePath = `/data/data/${this.opts.appPackage}/shared_prefs`;
    let remoteFile = `${remotePath}/${name}.xml`;
    let localPath = `/tmp/${name}.xml`;
    let builder = this.getPrefsBuilder();
    builder.build(sharedPrefs.prefs);

    _logger.default.info(`Creating temporary shared preferences: ${localPath}`);

    builder.toFile(localPath);

    _logger.default.info(`Creating shared_prefs remote folder: ${remotePath}`);

    await this.adb.shell(['mkdir', '-p', remotePath]);

    _logger.default.info(`Pushing shared_prefs to ${remoteFile}`);

    await this.adb.push(localPath, remoteFile);

    try {
      _logger.default.info(`Trying to remove shared preferences temporary file`);

      if (await _appiumSupport.fs.exists(localPath)) {
        await _appiumSupport.fs.unlink(localPath);
      }
    } catch (e) {
      _logger.default.warn(`Error trying to remove temporary file ${localPath}`);
    }

    return true;
  }

  getPrefsBuilder() {
    return new _sharedPreferencesBuilder.SharedPrefsBuilder();
  }

  validateDesiredCaps(caps) {
    if (!super.validateDesiredCaps(caps)) {
      return false;
    }

    return _androidHelpers.helpers.validateDesiredCaps(caps);
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return this.jwpProxyActive;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    return this.jwpProxyAvoid;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return _lodash.default.isFunction(this.proxyReqRes);
  }

}

exports.AndroidDriver = AndroidDriver;
var _default = AndroidDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
