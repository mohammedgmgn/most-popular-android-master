"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _remoteDebugger = require("./remote-debugger");

var _helpers = require("./helpers");

var _lodash = _interopRequireDefault(require("lodash"));

function cleanPageArray(arr) {
  return _lodash.default.map(arr, el => _lodash.default.pick(el, 'id', 'title', 'url'));
}

function onPageChange(appIdKey, pageDict) {
  const pageArray = (0, _helpers.pageArrayFromDict)(pageDict);

  if (this.appDict[appIdKey]) {
    if (this.appDict[appIdKey].pageArray) {
      if (this.appDict[appIdKey].pageArray.resolve) {
        this.appDict[appIdKey].pageArray.resolve();
      } else {
        if (_lodash.default.isEqual(cleanPageArray(this.appDict[appIdKey].pageArray), cleanPageArray(pageArray))) {
          _logger.default.debug(`Received page change notice for app '${appIdKey}' ` + `but the listing has not changed. Ignoring.`);

          return;
        }
      }
    }

    this.appDict[appIdKey].pageArray = pageArray;
  }

  if (this.appIdKey !== appIdKey) {
    _logger.default.debug(`Received page change notice for app '${appIdKey}' ` + `but listening for '${this.appIdKey}'. Ignoring.`);

    return;
  }

  _logger.default.debug(`Page changed: ${(0, _helpers.simpleStringify)(pageDict)}`);

  this.emit(_remoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, {
    appIdKey: appIdKey.replace('PID:', ''),
    pageArray
  });
}

function onAppConnect(dict) {
  let appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Notified that new application '${appIdKey}' has connected`);

  this.updateAppsWithDict(dict);
}

function onAppDisconnect(dict) {
  let appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Application '${appIdKey}' disconnected. Removing from app dictionary.`);

  _logger.default.debug(`Current app is ${this.appIdKey}`);

  delete this.appDict[appIdKey];

  if (this.appIdKey === appIdKey) {
    _logger.default.debug(`No longer have app id. Attempting to find new one.`);

    this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.platformVersion, this.appDict);
  }

  if (!this.appDict) {
    _logger.default.debug('Main app disconnected. Disconnecting altogether.');

    this.connected = false;
    this.emit(_remoteDebugger.RemoteDebugger.EVENT_DISCONNECT, true);
  }
}

function onAppUpdate(dict) {
  let appIdKey = dict.WIRApplicationIdentifierKey;

  _logger.default.debug(`Notified that application '${appIdKey}' has been updated`);

  this.updateAppsWithDict(dict);
}

function onReportDriverList(dict) {
  _logger.default.debug(`Notified of connected drivers: ${JSON.stringify(dict.WIRDriverDictionaryKey)}.`);
}

function onTargetCreated(app, targetInfo) {
  _logger.default.debug(`Target created: ${app} ${JSON.stringify(targetInfo)}`);
}

function onTargetDestroyed(app, targetInfo) {
  _logger.default.debug(`Target destroyed: ${app} ${JSON.stringify(targetInfo)}`);
}

const messageHandlers = {
  onPageChange,
  onAppConnect,
  onAppDisconnect,
  onAppUpdate,
  onReportDriverList,
  onTargetCreated,
  onTargetDestroyed
};
var _default = messageHandlers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
