"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getAttribute = async function (attribute, elementId) {
  let p = {
    attribute,
    elementId
  };
  return await this.bootstrap.sendAction('element:getAttribute', p);
};

commands.getName = async function (elementId) {
  return await this.getAttribute('className', elementId);
};

commands.elementDisplayed = async function (elementId) {
  return (await this.getAttribute('displayed', elementId)) === 'true';
};

commands.elementEnabled = async function (elementId) {
  return (await this.getAttribute('enabled', elementId)) === 'true';
};

commands.elementSelected = async function (elementId) {
  return (await this.getAttribute('selected', elementId)) === 'true';
};

helpers.setElementValue = async function (keys, elementId, replace = false) {
  let text = keys;

  if (keys instanceof Array) {
    text = keys.join('');
  }

  let params = {
    elementId,
    text,
    replace,
    unicodeKeyboard: this.opts.unicodeKeyboard
  };
  return await this.doSetElementValue(params);
};

helpers.doSetElementValue = async function (params) {
  return await this.bootstrap.sendAction('element:setText', params);
};

commands.setValue = async function (keys, elementId) {
  return await this.setElementValue(keys, elementId, false);
};

commands.replaceValue = async function (keys, elementId) {
  return await this.setElementValue(keys, elementId, true);
};

commands.setValueImmediate = async function (keys, elementId) {
  let text = keys;

  if (keys instanceof Array) {
    text = keys.join('');
  }

  await this.click(elementId);
  await this.adb.inputText(text);
};

commands.getText = async function (elementId) {
  return await this.bootstrap.sendAction('element:getText', {
    elementId
  });
};

commands.clear = async function (elementId) {
  let text = (await this.getText(elementId)) || '';
  let length = text.length;

  if (length === 0) {
    length = 100;
  }

  await this.click(elementId);

  _logger.default.debug(`Sending up to ${length} clear characters to device`);

  return await (0, _asyncbox.retryInterval)(5, 500, async () => {
    let remainingLength = length;

    while (remainingLength > 0) {
      let lengthToSend = remainingLength < 50 ? remainingLength : 50;

      _logger.default.debug(`Sending ${lengthToSend} clear characters to device`);

      await this.adb.clearTextField(lengthToSend);
      remainingLength -= lengthToSend;
    }
  });
};

commands.click = async function (elementId) {
  return await this.bootstrap.sendAction('element:click', {
    elementId
  });
};

commands.getLocation = async function (elementId) {
  return await this.bootstrap.sendAction('element:getLocation', {
    elementId
  });
};

commands.getLocationInView = async function (elementId) {
  return await this.getLocation(elementId);
};

commands.getSize = async function (elementId) {
  return await this.bootstrap.sendAction('element:getSize', {
    elementId
  });
};

commands.getElementRect = async function (elementId) {
  return await this.bootstrap.sendAction('element:getRect', {
    elementId
  });
};

commands.touchLongClick = async function (elementId, x, y, duration) {
  let params = {
    elementId,
    x,
    y,
    duration
  };

  _androidHelpers.default.removeNullProperties(params);

  return await this.bootstrap.sendAction('element:touchLongClick', params);
};

commands.touchDown = async function (elementId, x, y) {
  let params = {
    elementId,
    x,
    y
  };

  _androidHelpers.default.removeNullProperties(params);

  return await this.bootstrap.sendAction('element:touchDown', params);
};

commands.touchUp = async function (elementId, x, y) {
  let params = {
    elementId,
    x,
    y
  };

  _androidHelpers.default.removeNullProperties(params);

  return await this.bootstrap.sendAction('element:touchUp', params);
};

commands.touchMove = async function (elementId, x, y) {
  let params = {
    elementId,
    x,
    y
  };

  _androidHelpers.default.removeNullProperties(params);

  return await this.bootstrap.sendAction('element:touchMove', params);
};

commands.complexTap = async function (tapCount, touchCount, duration, x, y) {
  return await this.bootstrap.sendAction('click', {
    x,
    y
  });
};

commands.tap = async function (elementId, x = 0, y = 0, count = 1) {
  for (let i = 0; i < count; i++) {
    if (elementId) {
      if (x !== 0 || y !== 0) {
        await this.bootstrap.sendAction('element:click', {
          elementId,
          x,
          y
        });
      } else {
        await this.bootstrap.sendAction('element:click', {
          elementId
        });
      }
    } else {
      await this.bootstrap.sendAction('click', {
        x,
        y
      });
    }
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
