"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.doTouchAction = async function (action, opts) {
  switch (action) {
    case 'tap':
      return await this.tap(opts.element, opts.x, opts.y, opts.count);

    case 'press':
      return await this.touchDown(opts.element, opts.x, opts.y);

    case 'release':
      return await this.touchUp(opts.element, opts.x, opts.y);

    case 'moveTo':
      return await this.touchMove(opts.element, opts.x, opts.y);

    case 'wait':
      return await _bluebird.default.delay(opts.ms);

    case 'longPress':
      if (typeof opts.duration === 'undefined' || !opts.duration) {
        opts.duration = 1000;
      }

      return await this.touchLongClick(opts.element, opts.x, opts.y, opts.duration);

    case 'cancel':
      _logger.default.warn('Cancel action currently has no effect');

      break;

    default:
      _logger.default.errorAndThrow(`unknown action ${action}`);

  }
};

helpers.doTouchDrag = async function (gestures) {
  let longPress = gestures[0];
  let moveTo = gestures[1];
  let startX = longPress.options.x || 0,
      startY = longPress.options.y || 0,
      endX = moveTo.options.x || 0,
      endY = moveTo.options.y || 0;

  if (longPress.options.element) {
    let {
      x,
      y
    } = await this.getLocationInView(longPress.options.element);
    startX += x || 0;
    startY += y || 0;
  }

  if (moveTo.options.element) {
    let {
      x,
      y
    } = await this.getLocationInView(moveTo.options.element);
    endX += x || 0;
    endY += y || 0;
  }

  let apiLevel = await this.adb.getApiLevel();
  let duration = apiLevel >= 5 ? 2 : 1;

  if (longPress.options && longPress.options.duration) {
    duration = Math.max(longPress.options.duration / 1000, duration);
  }

  return await this.drag(startX, startY, endX, endY, duration, 1, longPress.options.element, moveTo.options.element);
};

helpers.fixRelease = async function (gestures) {
  let release = _lodash.default.last(gestures);

  release.options = release.options || {};

  if (release.options.element || release.options.x && release.options.y) {
    return;
  }

  gestures = _lodash.default.clone(gestures);
  let ref = null;

  for (let gesture of gestures.reverse()) {
    let opts = gesture.options;

    if (opts.element || opts.x && opts.y) {
      ref = gesture;
      break;
    }
  }

  if (ref) {
    let opts = ref.options;

    if (opts.element) {
      let loc = await this.getLocationInView(opts.element);

      if (opts.x && opts.y) {
        release.options = {
          x: loc.x + opts.x,
          y: loc.y + opts.y
        };
      } else {
        let size = await this.getSize(opts.element);
        release.options = {
          x: loc.x + size.width / 2,
          y: loc.y + size.height / 2
        };
      }
    } else {
      release.options = _lodash.default.pick(opts, 'x', 'y');
    }
  }

  return release;
};

helpers.performGesture = async function (gesture) {
  try {
    return await this.doTouchAction(gesture.action, gesture.options || {});
  } catch (e) {
    if ((0, _appiumBaseDriver.isErrorType)(e, _appiumBaseDriver.errors.NoSuchElementError) && gesture.action === 'release' && gesture.options.element) {
      delete gesture.options.element;

      _logger.default.debug(`retrying release without element opts: ${gesture.options}.`);

      return await this.doTouchAction(gesture.action, gesture.options || {});
    }

    throw e;
  }
};

commands.performTouch = async function (gestures) {
  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  }

  if (gestures.length === 4 && gestures[0].action === 'press' && gestures[1].action === 'wait' && gestures[2].action === 'moveTo' && gestures[3].action === 'release') {
    let swipeOpts = await this.getSwipeOptions(gestures);
    return await this.swipe(swipeOpts.startX, swipeOpts.startY, swipeOpts.endX, swipeOpts.endY, swipeOpts.duration, swipeOpts.touchCount, swipeOpts.element);
  }

  let actions = _lodash.default.map(gestures, 'action');

  if (actions[0] === 'longPress' && actions[1] === 'moveTo' && actions[2] === 'release') {
    return await this.doTouchDrag(gestures);
  } else {
    if (actions.length === 2) {
      if (_lodash.default.head(actions) === 'press' && _lodash.default.last(actions) === 'release') {
        actions[0] = 'tap';
        gestures[0].action = 'tap';
      }

      if ((_lodash.default.head(actions) === 'tap' || _lodash.default.head(actions) === 'longPress') && _lodash.default.last(actions) === 'release') {
        gestures.pop();
        actions.pop();
      }
    } else {
      if (actions[0] === 'longPress') {
        actions = ['press', 'wait', ...actions.slice(1)];
        let press = gestures.shift();
        press.action = 'press';
        let wait = {
          action: 'wait',
          options: {
            ms: press.options.duration || 1000
          }
        };
        delete press.options.duration;
        gestures = [press, wait, ...gestures];
      }
    }

    let fixedGestures = await this.parseTouch(gestures, false);

    if (actions[actions.length - 1] === 'release') {
      actions[actions.length - 1] = await this.fixRelease(gestures);
    }

    for (let g of fixedGestures) {
      await this.performGesture(g);
    }
  }
};

helpers.parseTouch = async function (gestures, multi) {
  if (multi && _lodash.default.last(gestures).action === 'release') {
    gestures.pop();
  }

  let touchStateObjects = await (0, _asyncbox.asyncmap)(gestures, async gesture => {
    let options = gesture.options || {};

    if (_lodash.default.includes(['press', 'moveTo', 'tap', 'longPress'], gesture.action)) {
      options.offset = false;
      let elementId = gesture.options.element;

      if (elementId) {
        let pos = await this.getLocationInView(elementId);

        if (gesture.options.x || gesture.options.y) {
          options.x = pos.x + (gesture.options.x || 0);
          options.y = pos.y + (gesture.options.y || 0);
        } else {
          const {
            width,
            height
          } = await this.getSize(elementId);
          options.x = pos.x + width / 2;
          options.y = pos.y + height / 2;
        }

        let touchStateObject = {
          action: gesture.action,
          options,
          timeOffset: 0.005
        };
        return touchStateObject;
      } else {
        options.x = gesture.options.x || 0;
        options.y = gesture.options.y || 0;
        let touchStateObject = {
          action: gesture.action,
          options,
          timeOffset: 0.005
        };
        return touchStateObject;
      }
    } else {
      let offset = 0.005;

      if (gesture.action === 'wait') {
        options = gesture.options;
        offset = parseInt(gesture.options.ms, 10) / 1000;
      }

      let touchStateObject = {
        action: gesture.action,
        options,
        timeOffset: offset
      };
      return touchStateObject;
    }
  }, false);
  let prevPos = null,
      time = 0;

  for (let state of touchStateObjects) {
    if (_lodash.default.isUndefined(state.options.x) && _lodash.default.isUndefined(state.options.y) && prevPos !== null) {
      state.options.x = prevPos.x;
      state.options.y = prevPos.y;
    }

    if (state.options.offset && prevPos) {
      state.options.x += prevPos.x;
      state.options.y += prevPos.y;
    }

    delete state.options.offset;

    if (!_lodash.default.isUndefined(state.options.x) && !_lodash.default.isUndefined(state.options.y)) {
      prevPos = state.options;
    }

    if (multi) {
      let timeOffset = state.timeOffset;
      time += timeOffset;
      state.time = _androidHelpers.default.truncateDecimals(time, 3);

      if (!_lodash.default.isUndefined(state.options.x) && !_lodash.default.isUndefined(state.options.y)) {
        state.touch = {
          x: state.options.x,
          y: state.options.y
        };
      }

      delete state.options;
    }

    delete state.timeOffset;
  }

  return touchStateObjects;
};

commands.performMultiAction = async function (actions, elementId) {
  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError();
  }

  if (actions.length === 1) {
    throw new Error('Multi Pointer Gestures need at least two actions. ' + 'Use Touch Actions for a single action.');
  }

  let states = await (0, _asyncbox.asyncmap)(actions, async action => {
    return await this.parseTouch(action, true);
  }, false);
  return await this.doPerformMultiAction(elementId, states);
};

commands.doPerformMultiAction = async function (elementId, states) {
  let opts;

  if (elementId) {
    opts = {
      elementId,
      actions: states
    };
    return await this.bootstrap.sendAction('element:performMultiPointerGesture', opts);
  } else {
    opts = {
      actions: states
    };
    return await this.bootstrap.sendAction('performMultiPointerGesture', opts);
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
