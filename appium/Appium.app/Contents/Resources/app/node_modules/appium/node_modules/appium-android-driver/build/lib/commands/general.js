"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseWindows = parseWindows;
exports.parseSurfaceLine = parseSurfaceLine;
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("../logger"));

var _moment = _interopRequireDefault(require("moment"));

var _asyncbox = require("asyncbox");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.keys = async function (keys) {
  keys = _lodash.default.isArray(keys) ? keys.join('') : keys;
  let params = {
    text: keys,
    replace: false
  };

  if (this.opts.unicodeKeyboard) {
    params.unicodeKeyboard = true;
  }

  await this.doSendKeys(params);
};

commands.doSendKeys = async function (params) {
  return await this.bootstrap.sendAction('setText', params);
};

const DEFAULT_DEVICE_TIME = 'YYYY-MM-DDTHH:mm:ssZ';

commands.getDeviceTime = async function (format = DEFAULT_DEVICE_TIME) {
  _logger.default.info('Attempting to capture android device date and time');

  if (!_lodash.default.isString(format)) {
    _logger.default.errorAndThrow(`The format specifier is expected to be a valid string specifier like '${DEFAULT_DEVICE_TIME}'. ` + `The current value is: ${format}`);
  }

  const deviceTimestamp = (await this.adb.shell(['date', '+%Y-%m-%dT%T%z'])).trim();
  const parsedTimestamp = (0, _moment.default)(deviceTimestamp, 'YYYY-MM-DDTHH:mm:ssZ');

  if (!parsedTimestamp.isValid()) {
    _logger.default.warn(`Cannot parse the returned timestamp '${deviceTimestamp}'. Returning as is`);

    return deviceTimestamp;
  }

  return parsedTimestamp.format(format);
};

commands.getPageSource = async function () {
  return await this.bootstrap.sendAction('source');
};

commands.back = async function () {
  return await this.bootstrap.sendAction('pressBack');
};

commands.isKeyboardShown = async function () {
  let keyboardInfo = await this.adb.isSoftKeyboardPresent();
  return keyboardInfo.isKeyboardShown;
};

commands.hideKeyboard = async function () {
  let {
    isKeyboardShown,
    canCloseKeyboard
  } = await this.adb.isSoftKeyboardPresent();

  if (!isKeyboardShown) {
    _logger.default.info('Keyboard has no UI; no closing necessary');

    return;
  }

  for (const keyCode of [111, 4]) {
    if (canCloseKeyboard) {
      await this.adb.keyevent(keyCode);
    }

    try {
      return await (0, _asyncbox.waitForCondition)(async () => {
        ({
          isKeyboardShown
        } = await this.adb.isSoftKeyboardPresent());
        return !isKeyboardShown;
      }, {
        waitMs: 1000,
        intervalMs: 500
      });
    } catch (ign) {}
  }

  throw new Error(`The software keyboard cannot be closed`);
};

commands.openSettingsActivity = async function (setting) {
  let {
    appPackage,
    appActivity
  } = await this.adb.getFocusedPackageAndActivity();
  await this.adb.shell(['am', 'start', '-a', `android.settings.${setting}`]);
  await this.adb.waitForNotActivity(appPackage, appActivity, 5000);
};

commands.getWindowSize = async function () {
  return await this.bootstrap.sendAction('getDeviceSize');
};

commands.getWindowRect = async function () {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

commands.getCurrentActivity = async function () {
  return (await this.adb.getFocusedPackageAndActivity()).appActivity;
};

commands.getCurrentPackage = async function () {
  return (await this.adb.getFocusedPackageAndActivity()).appPackage;
};

commands.background = async function (seconds) {
  if (seconds < 0) {
    await this.adb.goToHome();
    return true;
  }

  let {
    appPackage,
    appActivity
  } = await this.adb.getFocusedPackageAndActivity();
  await this.adb.goToHome();
  await _bluebird.default.delay(seconds * 1000);
  let args;

  if (this._cachedActivityArgs && this._cachedActivityArgs[`${appPackage}/${appActivity}`]) {
    args = this._cachedActivityArgs[`${appPackage}/${appActivity}`];
  } else {
    try {
      _logger.default.debug(`Activating app '${appPackage}' in order to restore it`);

      await this.activateApp(appPackage);
      return true;
    } catch (ign) {}

    args = appPackage === this.opts.appPackage && appActivity === this.opts.appActivity || appPackage === this.opts.appWaitPackage && (this.opts.appWaitActivity || '').split(',').includes(appActivity) ? {
      pkg: this.opts.appPackage,
      activity: this.opts.appActivity,
      action: this.opts.intentAction,
      category: this.opts.intentCategory,
      flags: this.opts.intentFlags,
      waitPkg: this.opts.appWaitPackage,
      waitActivity: this.opts.appWaitActivity,
      optionalIntentArguments: this.opts.optionalIntentArguments,
      stopApp: false,
      user: this.opts.userProfile
    } : {
      pkg: appPackage,
      activity: appActivity,
      waitPkg: appPackage,
      waitActivity: appActivity,
      stopApp: false
    };
  }

  args = await _appiumSupport.util.filterObject(args);

  _logger.default.debug(`Bringing application back to foreground with arguments: ${JSON.stringify(args)}`);

  return await this.adb.startApp(args);
};

commands.getStrings = async function (language) {
  if (!language) {
    language = await this.adb.getDeviceLanguage();

    _logger.default.info(`No language specified, returning strings for: ${language}`);
  }

  const preprocessStringsMap = mapping => {
    const result = {};

    for (const [key, value] of _lodash.default.toPairs(mapping)) {
      result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
    }

    return result;
  };

  if (this.apkStrings[language]) {
    return preprocessStringsMap(this.apkStrings[language]);
  }

  this.apkStrings[language] = await _androidHelpers.default.pushStrings(language, this.adb, this.opts);

  if (this.bootstrap) {
    await this.bootstrap.sendAction('updateStrings');
  }

  return preprocessStringsMap(this.apkStrings[language]);
};

commands.launchApp = async function () {
  await this.initAUT();
  await this.startAUT();
};

commands.startActivity = async function (appPackage, appActivity, appWaitPackage, appWaitActivity, intentAction, intentCategory, intentFlags, optionalIntentArguments, dontStopAppOnReset) {
  _logger.default.debug(`Starting package '${appPackage}' and activity '${appActivity}'`);

  if (!_appiumSupport.util.hasValue(dontStopAppOnReset)) {
    dontStopAppOnReset = !!this.opts.dontStopAppOnReset;
  }

  let args = {
    pkg: appPackage,
    activity: appActivity,
    waitPkg: appWaitPackage || appPackage,
    waitActivity: appWaitActivity || appActivity,
    action: intentAction,
    category: intentCategory,
    flags: intentFlags,
    optionalIntentArguments,
    stopApp: !dontStopAppOnReset
  };
  this._cachedActivityArgs = this._cachedActivityArgs || {};
  this._cachedActivityArgs[`${args.waitPkg}/${args.waitActivity}`] = args;
  await this.adb.startApp(args);
};

commands.reset = async function () {
  await _androidHelpers.default.resetApp(this.adb, Object.assign({}, this.opts, {
    fastReset: true
  }));
  await this.setContext();
  return (await this.isChromeSession) ? this.startChromeSession() : this.startAUT();
};

commands.startAUT = async function () {
  await this.adb.startApp({
    pkg: this.opts.appPackage,
    activity: this.opts.appActivity,
    action: this.opts.intentAction,
    category: this.opts.intentCategory,
    flags: this.opts.intentFlags,
    waitPkg: this.opts.appWaitPackage,
    waitActivity: this.opts.appWaitActivity,
    waitDuration: this.opts.appWaitDuration,
    optionalIntentArguments: this.opts.optionalIntentArguments,
    stopApp: !this.opts.dontStopAppOnReset,
    user: this.opts.userProfile
  });
};

commands.setUrl = async function (uri) {
  await this.adb.startUri(uri, this.opts.appPackage);
};

commands.closeApp = async function () {
  await this.adb.forceStop(this.opts.appPackage);
  await this.setContext();
};

commands.getDisplayDensity = async function () {
  let out = await this.adb.shell(['getprop', 'ro.sf.lcd_density']);

  if (out) {
    let val = parseInt(out, 10);

    if (!isNaN(val)) {
      return val;
    }

    _logger.default.debug(`Parsed density value was NaN: "${out}"`);
  }

  out = await this.adb.shell(['getprop', 'qemu.sf.lcd_density']);

  if (out) {
    let val = parseInt(out, 10);

    if (!isNaN(val)) {
      return val;
    }

    _logger.default.debug(`Parsed density value was NaN: "${out}"`);
  }

  _logger.default.errorAndThrow('Failed to get display density property.');
};

function parseSurfaceLine(line) {
  let bounds = line.split('rect=')[1].replace(/[(), x]+/g, ' ').trim().split(' ');
  return {
    visible: line.indexOf('shown=true') !== -1,
    x: parseFloat(bounds[0]),
    y: parseFloat(bounds[1]),
    width: parseFloat(bounds[2]),
    height: parseFloat(bounds[3])
  };
}

function parseWindows(lines) {
  let atStatusBar = false;
  let atNavBar = false;
  let statusBar;
  let navigationBar;
  lines.split('\n').forEach(line => {
    if (line.indexOf('  Window #') !== -1) {
      atStatusBar = line.indexOf('StatusBar') !== -1;
      atNavBar = line.indexOf('NavigationBar') !== -1;
      return;
    }

    if (line.indexOf('      Surface:') === -1) {
      return;
    }

    if (atStatusBar) {
      statusBar = parseSurfaceLine(line);
      atStatusBar = false;
    } else if (atNavBar) {
      navigationBar = parseSurfaceLine(line);
      atNavBar = false;
    }
  });

  if (!statusBar) {
    _logger.default.errorAndThrow('Failed to parse status bar information.');
  }

  if (!navigationBar) {
    _logger.default.errorAndThrow('Failed to parse navigation bar information.');
  }

  return {
    statusBar,
    navigationBar
  };
}

commands.getSystemBars = async function () {
  let out = await this.adb.shell(['dumpsys', 'window', 'windows']);

  if (!out) {
    _logger.default.errorAndThrow('Did not get window manager output.');
  }

  return parseWindows(out);
};

commands.mobilePerformEditorAction = async function (opts = {}) {
  const {
    action
  } = opts;

  if (!_appiumSupport.util.hasValue(action)) {
    _logger.default.errorAndThrow(`'action' argument is required`);
  }

  await this.adb.performEditorAction(action);
};

const PERMISSION_ACTION = {
  GRANT: 'grant',
  REVOKE: 'revoke'
};

commands.mobileChangePermissions = async function (opts = {}) {
  const {
    permissions,
    appPackage = this.opts.appPackage,
    action = PERMISSION_ACTION.GRANT
  } = opts;

  if (!_appiumSupport.util.hasValue(permissions)) {
    _logger.default.errorAndThrow(`'permissions' argument is required`);
  }

  let actionFunc;

  switch (_lodash.default.toLower(action)) {
    case PERMISSION_ACTION.GRANT:
      actionFunc = (appPackage, permission) => this.adb.grantPermission(appPackage, permission);

      break;

    case PERMISSION_ACTION.REVOKE:
      actionFunc = (appPackage, permission) => this.adb.revokePermission(appPackage, permission);

      break;

    default:
      _logger.default.errorAndThrow(`Unknown action '${action}'. ` + `Only ${JSON.stringify(_lodash.default.values(PERMISSION_ACTION))} actions are supported`);

      break;
  }

  for (const permission of _lodash.default.isArray(permissions) ? permissions : [permissions]) {
    await actionFunc(appPackage, permission);
  }
};

const PERMISSIONS_TYPE = {
  DENIED: 'denied',
  GRANTED: 'granted',
  REQUESTED: 'requested'
};

commands.mobileGetPermissions = async function (opts = {}) {
  const {
    type = PERMISSIONS_TYPE.REQUESTED,
    appPackage = this.opts.appPackage
  } = opts;
  let actionFunc;

  switch (_lodash.default.toLower(type)) {
    case PERMISSIONS_TYPE.REQUESTED:
      actionFunc = appPackage => this.adb.getReqPermissions(appPackage);

      break;

    case PERMISSIONS_TYPE.GRANTED:
      actionFunc = appPackage => this.adb.getGrantedPermissions(appPackage);

      break;

    case PERMISSIONS_TYPE.DENIED:
      actionFunc = appPackage => this.adb.getDeniedPermissions(appPackage);

      break;

    default:
      _logger.default.errorAndThrow(`Unknown permissions type '${type}'. ` + `Only ${JSON.stringify(_lodash.default.values(PERMISSIONS_TYPE))} types are supported`);

      break;
  }

  return await actionFunc(appPackage);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
