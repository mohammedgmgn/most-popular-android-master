"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ADB_PORT = exports.ADB = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _index = _interopRequireDefault(require("./tools/index.js"));

var _helpers = require("./helpers");

const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;

const JAR_PATH = _path.default.resolve(_helpers.rootDir, 'jars');

const DEFAULT_OPTS = {
  sdkRoot: null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: 'adb',
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  suppressKillServer: null,
  jars: {},
  helperJarPath: JAR_PATH,
  adbPort: DEFAULT_ADB_PORT,
  adbExecTimeout: _helpers.DEFAULT_ADB_EXEC_TIMEOUT,
  remoteAppsCacheLimit: 10
};

class ADB {
  constructor(opts = {}) {
    if (typeof opts.sdkRoot === 'undefined') {
      opts.sdkRoot = process.env.ANDROID_HOME || '';
    }

    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push('-H', opts.remoteAdbHost);
    }

    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }

    this.executable.defaultArgs.push('-P', this.adbPort);
    this.initJars();
  }

  initJars() {
    const tempJars = ['move_manifest.jar', 'sign.jar', 'appium_apk_tools.jar', 'unsign.jar', 'verify.jar'];

    for (const jarName of tempJars) {
      this.jars[jarName] = _path.default.resolve(JAR_PATH, jarName);
    }
  }

}

exports.ADB = ADB;

ADB.createADB = async function createADB(opts) {
  let adb = new ADB(opts);
  await adb.getAdbWithCorrectAdbPath();
  return adb;
};

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  ADB.prototype[fnName] = fn;
}

var _default = ADB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZGIuanMiXSwibmFtZXMiOlsiREVGQVVMVF9BREJfUE9SVCIsIkpBUl9QQVRIIiwicGF0aCIsInJlc29sdmUiLCJyb290RGlyIiwiREVGQVVMVF9PUFRTIiwic2RrUm9vdCIsInVkaWQiLCJhcHBEZXZpY2VSZWFkeVRpbWVvdXQiLCJ1c2VLZXlzdG9yZSIsImtleXN0b3JlUGF0aCIsImtleXN0b3JlUGFzc3dvcmQiLCJrZXlBbGlhcyIsImtleVBhc3N3b3JkIiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwidG1wRGlyIiwib3MiLCJ0bXBkaXIiLCJjdXJEZXZpY2VJZCIsImVtdWxhdG9yUG9ydCIsImxvZ2NhdCIsImJpbmFyaWVzIiwiaW5zdHJ1bWVudFByb2MiLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJqYXJzIiwiaGVscGVySmFyUGF0aCIsImFkYlBvcnQiLCJhZGJFeGVjVGltZW91dCIsIkRFRkFVTFRfQURCX0VYRUNfVElNRU9VVCIsInJlbW90ZUFwcHNDYWNoZUxpbWl0IiwiQURCIiwiY29uc3RydWN0b3IiLCJvcHRzIiwicHJvY2VzcyIsImVudiIsIkFORFJPSURfSE9NRSIsIk9iamVjdCIsImFzc2lnbiIsIl8iLCJkZWZhdWx0c0RlZXAiLCJjbG9uZURlZXAiLCJyZW1vdGVBZGJIb3N0IiwicHVzaCIsInJlbW90ZUFkYlBvcnQiLCJpbml0SmFycyIsInRlbXBKYXJzIiwiamFyTmFtZSIsImNyZWF0ZUFEQiIsImFkYiIsImdldEFkYldpdGhDb3JyZWN0QWRiUGF0aCIsImZuTmFtZSIsImZuIiwidG9QYWlycyIsIm1ldGhvZHMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsZ0JBQWdCLEdBQUcsSUFBekI7OztBQUNBLE1BQU1DLFFBQVEsR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxnQkFBYixFQUFzQixNQUF0QixDQUFqQjs7QUFDQSxNQUFNQyxZ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LGNBQVYsQ0FBM0IsRUFBK0M7QUFDN0N2QixFQUFBQSxHQUFHLENBQUN3QixTQUFKLENBQWNKLE1BQWQsSUFBd0JDLEVBQXhCO0FBQ0Q7O2VBRWNyQixHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBtZXRob2RzIGZyb20gJy4vdG9vbHMvaW5kZXguanMnO1xuaW1wb3J0IHsgcm9vdERpciwgREVGQVVMVF9BREJfRVhFQ19USU1FT1VUIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuY29uc3QgREVGQVVMVF9BREJfUE9SVCA9IDUwMzc7XG5jb25zdCBKQVJfUEFUSCA9IHBhdGgucmVzb2x2ZShyb290RGlyLCAnamFycycpO1xuY29uc3QgREVGQVVMVF9PUFRTID0ge1xuICBzZGtSb290OiBudWxsLFxuICB1ZGlkOiBudWxsLFxuICBhcHBEZXZpY2VSZWFkeVRpbWVvdXQ6IG51bGwsXG4gIHVzZUtleXN0b3JlOiBudWxsLFxuICBrZXlzdG9yZVBhdGg6IG51bGwsXG4gIGtleXN0b3JlUGFzc3dvcmQ6IG51bGwsXG4gIGtleUFsaWFzOiBudWxsLFxuICBrZXlQYXNzd29yZDogbnVsbCxcbiAgZXhlY3V0YWJsZToge3BhdGg6ICdhZGInLCBkZWZhdWx0QXJnczogW119LFxuICB0bXBEaXI6IG9zLnRtcGRpcigpLFxuICBjdXJEZXZpY2VJZDogbnVsbCxcbiAgZW11bGF0b3JQb3J0OiBudWxsLFxuICBsb2djYXQ6IG51bGwsXG4gIGJpbmFyaWVzOiB7fSxcbiAgaW5zdHJ1bWVudFByb2M6IG51bGwsXG4gIHN1cHByZXNzS2lsbFNlcnZlcjogbnVsbCxcbiAgamFyczoge30sXG4gIGhlbHBlckphclBhdGg6IEpBUl9QQVRILFxuICBhZGJQb3J0OiBERUZBVUxUX0FEQl9QT1JULFxuICBhZGJFeGVjVGltZW91dDogREVGQVVMVF9BREJfRVhFQ19USU1FT1VULFxuICByZW1vdGVBcHBzQ2FjaGVMaW1pdDogMTAsXG59O1xuXG5jbGFzcyBBREIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzLnNka1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvcHRzLnNka1Jvb3QgPSBwcm9jZXNzLmVudi5BTkRST0lEX0hPTUUgfHwgJyc7XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcbiAgICBfLmRlZmF1bHRzRGVlcCh0aGlzLCBfLmNsb25lRGVlcChERUZBVUxUX09QVFMpKTtcblxuICAgIGlmIChvcHRzLnJlbW90ZUFkYkhvc3QpIHtcbiAgICAgIHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5wdXNoKCctSCcsIG9wdHMucmVtb3RlQWRiSG9zdCk7XG4gICAgfVxuICAgIC8vIFRPRE8gZmlndXJlIG91dCB3aHkgd2UgaGF2ZSB0aGlzIG9wdGlvbiBhcyBpdCBkb2VzIG5vdCBhcHBlYXIgdG8gYmVcbiAgICAvLyB1c2VkIGFueXdoZXJlLiBQcm9iYWJseSBkZXByZWNhdGUgaW4gZmF2b3Igb2Ygc2ltcGxlIG9wdHMuYWRiUG9ydFxuICAgIGlmIChvcHRzLnJlbW90ZUFkYlBvcnQpIHtcbiAgICAgIHRoaXMuYWRiUG9ydCA9IG9wdHMucmVtb3RlQWRiUG9ydDtcbiAgICB9XG4gICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy1QJywgdGhpcy5hZGJQb3J0KTtcblxuICAgIHRoaXMuaW5pdEphcnMoKTtcbiAgfVxuXG4gIGluaXRKYXJzICgpIHtcbiAgICBjb25zdCB0ZW1wSmFycyA9IFtcbiAgICAgICdtb3ZlX21hbmlmZXN0LmphcicsICdzaWduLmphcicsICdhcHBpdW1fYXBrX3Rvb2xzLmphcicsXG4gICAgICAndW5zaWduLmphcicsICd2ZXJpZnkuamFyJyxcbiAgICBdO1xuICAgIGZvciAoY29uc3QgamFyTmFtZSBvZiB0ZW1wSmFycykge1xuICAgICAgdGhpcy5qYXJzW2phck5hbWVdID0gcGF0aC5yZXNvbHZlKEpBUl9QQVRILCBqYXJOYW1lKTtcbiAgICB9XG4gIH1cbn1cblxuQURCLmNyZWF0ZUFEQiA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFEQiAob3B0cykge1xuICBsZXQgYWRiID0gbmV3IEFEQihvcHRzKTtcbiAgYXdhaXQgYWRiLmdldEFkYldpdGhDb3JyZWN0QWRiUGF0aCgpO1xuICByZXR1cm4gYWRiO1xufTtcblxuLy8gYWRkIGFsbCB0aGUgbWV0aG9kcyB0byB0aGUgQURCIHByb3RvdHlwZVxuZm9yIChjb25zdCBbZm5OYW1lLCBmbl0gb2YgXy50b1BhaXJzKG1ldGhvZHMpKSB7XG4gIEFEQi5wcm90b3R5cGVbZm5OYW1lXSA9IGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBREI7XG5leHBvcnQgeyBBREIsIERFRkFVTFRfQURCX1BPUlQgfTtcbiJdLCJmaWxlIjoibGliL2FkYi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
