"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncbox = require("asyncbox");

var _appiumRemoteDebugger = require("appium-remote-debugger");

var _iosPerformanceLog = _interopRequireDefault(require("../device-log/ios-performance-log"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

const NATIVE_WIN = 'NATIVE_APP';
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = 'WEBVIEW';
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getCurrentContext = async function getCurrentContext() {
  if (this.curContext && this.curContext !== NATIVE_WIN) {
    return `${WEBVIEW_BASE}${this.curContext}`;
  } else {
    return NATIVE_WIN;
  }
};

commands.getContexts = async function getContexts() {
  _logger.default.debug('Getting list of available contexts');

  let contexts = await this.getContextsAndViews(false);

  let mapFn = context => context.id.toString();

  if (this.opts.fullContextList) {
    mapFn = context => {
      return {
        id: context.id.toString(),
        title: context.view.title,
        url: context.view.url
      };
    };
  }

  return contexts.map(mapFn);
};

commands.setContext = async function setContext(name, callback, skipReadyCheck) {
  function alreadyInContext(desired, current) {
    return desired === current || desired === null && current === NATIVE_WIN || desired === NATIVE_WIN && current === null;
  }

  _logger.default.debug(`Attempting to set context to '${name}'`);

  if (alreadyInContext(name, this.curContext)) {} else if (name === NATIVE_WIN || name === null) {
    this.curContext = null;

    if (this.isRealDevice()) {
      this.remote.disconnect();
    }
  } else {
    if (_lodash.default.isUndefined(this.contexts)) {
      await this.getContexts();
    }

    let contextId = name.replace(WEBVIEW_BASE, '');

    if (contextId === '') {
      contextId = this.contexts[1];
    }

    if (!_lodash.default.includes(this.contexts, contextId)) {
      throw new _appiumBaseDriver.errors.NoSuchContextError();
    }

    if (this.isRealDevice()) {
      if (this.remote) {
        await this.remote.disconnect();
      }

      this.curContext = contextId;
      await this.remote.connect(contextId);
    } else {
      let [appIdKey, pageIdKey] = _lodash.default.map(contextId.split('.'), id => parseInt(id, 10));

      await this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck);
      this.curContext = contextId;
    }
  }

  if (this.opts.enablePerformanceLogging && this.remote) {
    _logger.default.debug(`Starting performance log on '${this.curContext}'`);

    this.logs.performance = new _iosPerformanceLog.default(this.remote);
    await this.logs.performance.startCapture();
  }
};

commands.getWindowHandle = async function getWindowHandle() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return this.curContext.toString();
};

commands.getWindowHandles = async function getWindowHandles() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  this.windowHandleCache = await this.listWebFrames(false);

  const idArray = _lodash.default.map(this.windowHandleCache, 'id');

  if (!this.contexts) {
    this.contexts = idArray;
  }

  return _lodash.default.map(idArray, id => id.toString());
};

commands.setWindow = async function setWindow(name, skipReadyCheck) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  if (!_lodash.default.includes(_lodash.default.map(this.windowHandleCache, 'id'), name)) {
    throw new _appiumBaseDriver.errors.NoSuchWindowError();
  }

  let pageIdKey = parseInt(name, 10);

  if (!this.isRealDevice()) {
    await this.remote.selectPage(pageIdKey, skipReadyCheck);
    this.curContext = this.curWindowHandle = name;
  } else {
    if (name === this.curWindowHandle) {
      _logger.default.debug(`Remote debugger is already connected to window '${name}'`);
    } else if (!_lodash.default.includes(_lodash.default.map(this.windowHandleCache, 'id'), name)) {
      throw new _appiumBaseDriver.errors.NoSuchWindowError();
    } else {
      await this.remote.disconnect();
      this.curContext = this.curWindowHandle = name;
      await this.remote.connect(name);
    }
  }
};

helpers.webContextIndex = function webContextIndex() {
  return this.curContext.replace(WEBVIEW_BASE, '') - 1;
};

extensions.initAutoWebview = async function initAutoWebview() {
  if (this.opts.autoWebview) {
    _logger.default.debug('Setting auto webview');

    await this.navToInitialWebview(this);
  }
};

extensions.getContextsAndViews = async function getContextsAndViews(useUrl = true) {
  _logger.default.debug('Retrieving contexts and views');

  let webviews = await this.listWebFrames(useUrl);
  let ctxs = [{
    id: NATIVE_WIN,
    view: {}
  }];
  this.contexts = [NATIVE_WIN];

  for (let view of webviews) {
    ctxs.push({
      id: `${WEBVIEW_BASE}${view.id}`,
      view
    });
    this.contexts.push(view.id.toString());
  }

  return ctxs;
};

extensions.getNewRemoteDebugger = async function getNewRemoteDebugger() {
  return new _appiumRemoteDebugger.RemoteDebugger({
    bundleId: this.opts.bundleId,
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _appiumSupport.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : true
  });
};

extensions.listWebFrames = async function listWebFrames(useUrl = true) {
  if (!this.opts.bundleId) {
    _logger.default.errorAndThrow('Cannot enter web frame without a bundle ID');
  }

  useUrl = useUrl && !!this.getCurrentUrl();

  _logger.default.debug(`Selecting by url: ${useUrl} ${useUrl ? `(expected url: '${this.getCurrentUrl()}')` : ''}`);

  let currentUrl = useUrl ? this.getCurrentUrl() : undefined;
  let pageArray;

  if (this.isRealDevice() && this.remote && this.opts.bundleId) {
    pageArray = await this.remote.pageArrayFromJson(this.opts.ignoreAboutBlankUrl);
  } else if (this.remote && this.remote.appIdKey) {
    pageArray = await this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
  } else if (this.isRealDevice()) {
    try {
      this.remote = new _appiumRemoteDebugger.WebKitRemoteDebugger({
        port: this.opts.webkitDebugProxyPort,
        webkitResponseTimeout: this.opts.webkitResponseTimeout
      });
      pageArray = await this.remote.pageArrayFromJson(this.opts.ignoreAboutBlankUrl);
    } catch (err) {
      if (!_lodash.default.includes(err.message, 'connect ECONNREFUSED')) throw err;

      _logger.default.warn('Attempted to get a list of webview contexts but could not connect to ' + 'ios-webkit-debug-proxy. If you expect to find webviews, please ensure ' + 'that the proxy is running and accessible');

      this.remote = null;
      pageArray = [];
    }
  } else {
    this.remote = await this.getNewRemoteDebugger();
    let appInfo = await this.remote.connect();

    if (!appInfo) {
      _logger.default.debug('Unable to connect to the remote debugger.');

      return [];
    }

    pageArray = await this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
    this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));
    this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_FRAMES_DETACHED, () => {
      if (!_lodash.default.isEmpty(this.curWebFrames)) {
        _logger.default.debug(`Clearing ${this.curWebFrames.length} frames: ${this.curWebFrames.join(', ')}`);
      }

      this.curWebFrames = [];
    });

    let tryClosingAlert = async () => {
      let didDismiss = await this.closeAlertBeforeTest();

      if (!didDismiss) {
        throw new Error('Close alert failed. Retry.');
      }
    };

    try {
      await (0, _asyncbox.retryInterval)(3, 4000, tryClosingAlert);
    } catch (err) {
      if (err.message !== 'Close alert failed. Retry.') {
        _logger.default.errorAndThrow(err);
      }
    }
  }

  if (pageArray.length === 0) {
    _logger.default.debug('No web frames found.');
  }

  return pageArray;
};

extensions.onPageChange = async function onPageChange(pageChangeNotification) {
  _logger.default.debug(`Remote debugger notified us of a new page listing: ${JSON.stringify(pageChangeNotification)}`);

  if (this.selectingNewPage) {
    _logger.default.debug('We are in the middle of selecting a page, ignoring');

    return;
  }

  if (!this.remote || !this.remote.isConnected()) {
    _logger.default.debug('We have not yet connected, ignoring');

    return;
  }

  const {
    appIdKey,
    pageArray
  } = pageChangeNotification;
  let newIds = [];
  let newPages = [];
  let keyId = null;

  for (const page of pageArray) {
    const id = page.id.toString();
    newIds.push(id);

    if (page.isKey) {
      keyId = id;
    }

    const contextId = `${appIdKey}.${id}`;

    if (!_lodash.default.includes(this.contexts, contextId)) {
      newPages.push(id);
      this.contexts.push(contextId);
    }
  }

  if (!keyId) {
    _logger.default.debug('No key id found. Choosing first id from page array');

    keyId = newIds[0] || null;
  }

  if (!_appiumSupport.util.hasValue(this.curContext)) {
    _logger.default.debug('We do not appear to have window set yet, ignoring');

    return;
  }

  const [curAppIdKey, curPageIdKey] = this.curContext.split('.');

  if (curAppIdKey !== appIdKey) {
    _logger.default.debug('Page change not referring to currently selected app, ignoring.');

    return;
  }

  let newPage = null;

  if (newPages.length) {
    newPage = _lodash.default.last(newPages);

    _logger.default.debug(`We have new pages, selecting page '${newPage}'`);
  } else if (!_lodash.default.includes(newIds, curPageIdKey)) {
    _logger.default.debug('New page listing from remote debugger does not contain ' + 'current window; assuming it is closed');

    if (!_appiumSupport.util.hasValue(keyId)) {
      _logger.default.error('Do not have our current window anymore, and there ' + 'are not any more to load! Doing nothing...');

      this.setCurrentUrl(undefined);
      return;
    }

    _logger.default.debug(`Debugger already selected page '${keyId}', ` + `confirming that choice.`);

    this.curContext = `${appIdKey}.${keyId}`;
    newPage = keyId;
  } else {
    _logger.default.debug('Checking if page needs to load');

    const needsPageLoad = (() => {
      const contextArray = _lodash.default.map(pageArray, page => `${appIdKey}.${page.id}`);

      return !_lodash.default.isEqual(_lodash.default.find(this.contexts, this.curContext), _lodash.default.find(contextArray, this.curContext));
    })();

    if (needsPageLoad) {
      _logger.default.debug('Page load needed. Loading...');

      await this.remote.pageLoad();
    }

    _logger.default.debug('New page listing is same as old, doing nothing');
  }

  if (_appiumSupport.util.hasValue(this.curContext)) {
    let currentPageId = parseInt(_lodash.default.last(this.curContext.split('.')), 10);

    let page = _lodash.default.find(pageArray, p => parseInt(p.id, 10) === currentPageId);

    if (page && page.url !== this.getCurrentUrl()) {
      _logger.default.debug(`Redirected from '${this.getCurrentUrl()}' to '${page.url}'`);

      this.setCurrentUrl(page.url);
    }
  }

  if (_appiumSupport.util.hasValue(newPage)) {
    this.selectingNewPage = true;
    await this.remote.selectPage(appIdKey, parseInt(newPage, 10));
    this.selectingNewPage = false;
    this.curContext = `${appIdKey}.${newPage}`;
  }

  this.windowHandleCache = pageArray;
};

extensions.getLatestWebviewContextForTitle = async function getLatestWebviewContextForTitle(regExp) {
  let contexts = await this.getContextsAndViews();
  let matchingCtx;

  for (let ctx of contexts) {
    if (ctx.view && (ctx.view.title && ctx.view.title.match(regExp) || ctx.view.url && ctx.view.url.match(regExp))) {
      if (ctx.view.url !== 'about:blank') {
        matchingCtx = ctx;
      } else {
        if (parseFloat(this.iosSdkVersion) < 7 || parseFloat(this.iosSdkVersion) >= 9 || this.opts.platformVersion === '7.1' && this.opts.app && this.opts.app.toLowerCase() !== 'safari') {
          matchingCtx = ctx;
        }
      }

      break;
    }
  }

  return matchingCtx ? matchingCtx.id : undefined;
};

extensions.useNewSafari = function useNewSafari() {
  return parseFloat(this.iosSdkVersion) >= 8.1 && parseFloat(this.opts.platformVersion) >= 8.1 && !this.isRealDevice() && this.opts.safari;
};

extensions.navToInitialWebview = async function navToInitialWebview() {
  let timeout = 0;

  if (this.isRealDevice()) {
    timeout = 3000;

    _logger.default.debug(`Waiting for ${timeout} ms before navigating to view.`);
  }

  await _bluebird.default.delay(timeout);

  if (this.useNewSafari()) {
    await this.typeAndNavToUrl();
  } else if (parseInt(this.iosSdkVersion, 10) >= 7 && !this.isRealDevice() && this.opts.safari) {
    await this.navToViewThroughFavorites();
  } else {
    await this.navToViewWithTitle(/.*/);
  }
};

async function openNewPage() {
  let newPageButton = await this.findElement('xpath', "//UIAButton[contains(@name,'New page')]");
  await this.nativeTap(newPageButton.ELEMENT);
}

extensions.typeAndNavToUrl = async function typeAndNavToUrl() {
  let address = this.opts.address ? this.opts.address : '127.0.0.1';
  this.setCurrentUrl(this.caps.safariInitialUrl || `http://${address}:${this.opts.port}/welcome`);
  let tries = 0;
  const MAX_TRIES = 2;

  let navigate = async () => {
    let oldImpWait = this.implicitWaitMs;
    this.implicitWaitMs = 7000;
    let el = await (0, _asyncbox.retryInterval)(3, 1000, async () => {
      return await this.findElement('accessibility id', 'URL');
    });
    this.implicitWaitMs = oldImpWait;

    try {
      await this.nativeTap(el.ELEMENT);
    } catch (err) {
      if (_lodash.default.includes(err.message, 'could not be tapped')) {
        if (tries++ >= MAX_TRIES) throw err;
        await openNewPage();
        return await navigate();
      } else {
        throw err;
      }
    }

    try {
      let el = await this.findElement('class name', 'UIATextField');
      await this.setValueImmediate(this.getCurrentUrl(), el);
    } catch (err) {
      if (tries++ >= MAX_TRIES) throw err;
      return await navigate();
    }

    try {
      el = await this.findElement('accessibility id', 'Go');
      await this.nativeTap(el.ELEMENT);
    } catch (err) {
      if (_lodash.default.includes(err.message, 'could not be tapped')) {
        _logger.default.error('Unable to submit URL because \'Go\' button could not be tapped. ' + 'Please make sure your keyboard is toggled on.');
      }

      throw err;
    }

    await this.navToViewWithTitle(undefined, new RegExp(this.getCurrentUrl(), 'i'));
    await this.remote.pageUnload();
  };

  await navigate();
};

extensions.navToViewThroughFavorites = async function navToViewThroughFavorites() {
  _logger.default.debug('We are on iOS7+ simulator: clicking apple button to get into a webview');

  let oldImpWait = this.implicitWaitMs;
  this.implicitWaitMs = 7000;
  let el;

  try {
    el = await this.findElement('xpath', '//UIAScrollView[1]/UIAButton[1]');
  } catch (err) {
    let msg = 'Could not find button to click to get into webview. ' + 'Proceeding on the assumption we have a working one.';

    _logger.default.error(msg);

    this.implicitWaitMs = oldImpWait;
    return await this.navToViewWithTitle(/.*/i);
  }

  this.implicitWaitMs = oldImpWait;

  try {
    await this.nativeTap(el.ELEMENT);
  } catch (err) {
    let msg = 'Could not click button to get into webview. ' + 'Proceeding on the assumption we have a working one.';

    _logger.default.error(msg);
  }

  await this.navToViewWithTitle(/apple/i);
};

extensions.navToViewWithTitle = async function navToViewWithTitle(titleRegex, urlRegExp) {
  _logger.default.debug('Navigating to most recently opened webview');

  let start = Date.now();
  let spinTime = 500;

  let spinHandles = async () => {
    let res;

    try {
      res = await this.getLatestWebviewContextForTitle(titleRegex || urlRegExp);
    } catch (err) {
      if (!err.message.includes('Could not connect to a valid app after')) {
        const error = new Error(`Could not navigate to webview! Err: ${err.message}`);
        error.stack += `\nCaused by: ${err.stack}`;
        throw error;
      }

      _logger.default.debug('Could not navigate to webview. Retrying if possible.');
    }

    if (res) {
      let latestWindow = res;

      _logger.default.debug(`Picking webview '${latestWindow}'`);

      await this.setContext(latestWindow);
      await this.remote.cancelPageLoad();
      return;
    }

    if (Date.now() - start >= 90000) {
      throw new Error('Could not navigate to webview; there are none!');
    }

    _logger.default.warn('Could not find any webviews yet, refreshing/retrying');

    if (this.isRealDevice() || !this.opts.safari) {
      await _bluebird.default.delay(spinTime);
      return await spinHandles();
    }

    let element;

    try {
      _logger.default.debug('Finding and tapping reload button');

      element = await this.findUIElementOrElements('accessibility id', 'ReloadButton', '', false);
      await this.nativeTap(element.ELEMENT);
    } catch (err) {
      _logger.default.warn(`Error finding and tapping reload button: ${err.message}`);

      _logger.default.warn('Retrying.');

      await _bluebird.default.delay(spinTime);
    }

    return await spinHandles();
  };

  await spinHandles();
};

helpers.closeAlertBeforeTest = async function closeAlertBeforeTest() {
  let present = await this.uiAutoClient.sendCommand('au.alertIsPresent()');

  if (!present) {
    return false;
  }

  _logger.default.debug('Alert present before starting test, let us banish it');

  await this.uiAutoClient.sendCommand('au.dismissAlert()');

  _logger.default.debug('Alert banished!');

  return true;
};

helpers.stopRemote = async function stopRemote(closeWindowBeforeDisconnecting = false) {
  if (!this.remote) {
    _logger.default.errorAndThrow('Tried to leave a web frame but were not in one');
  }

  if (closeWindowBeforeDisconnecting) {
    await this.closeWindow();
  }

  await this.remote.disconnect();
  this.curContext = null;
  this.curWebFrames = [];
  this.curWebCoords = null;
  this.remote = null;
};

helpers.isWebContext = function isWebContext() {
  return !!this.curContext && this.curContext !== NATIVE_WIN;
};

helpers.setCurrentUrl = function setCurrentUrl(url) {
  this._currentUrl = url;
};

helpers.getCurrentUrl = function getCurrentUrl() {
  return this._currentUrl;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb250ZXh0LmpzIl0sIm5hbWVzIjpbIk5BVElWRV9XSU4iLCJXRUJWSUVXX1dJTiIsIldFQlZJRVdfQkFTRSIsImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRDdXJyZW50Q29udGV4dCIsImN1ckNvbnRleHQiLCJnZXRDb250ZXh0cyIsImxvZ2dlciIsImRlYnVnIiwiY29udGV4dHMiLCJnZXRDb250ZXh0c0FuZFZpZXdzIiwibWFwRm4iLCJjb250ZXh0IiwiaWQiLCJ0b1N0cmluZyIsIm9wdHMiLCJmdWxsQ29udGV4dExpc3QiLCJ0aXRsZSIsInZpZXciLCJ1cmwiLCJtYXAiLCJzZXRDb250ZXh0IiwibmFtZSIsImNhbGxiYWNrIiwic2tpcFJlYWR5Q2hlY2siLCJhbHJlYWR5SW5Db250ZXh0IiwiZGVzaXJlZCIsImN1cnJlbnQiLCJpc1JlYWxEZXZpY2UiLCJyZW1vdGUiLCJkaXNjb25uZWN0IiwiXyIsImlzVW5kZWZpbmVkIiwiY29udGV4dElkIiwicmVwbGFjZSIsImluY2x1ZGVzIiwiZXJyb3JzIiwiTm9TdWNoQ29udGV4dEVycm9yIiwiY29ubmVjdCIsImFwcElkS2V5IiwicGFnZUlkS2V5Iiwic3BsaXQiLCJwYXJzZUludCIsInNlbGVjdFBhZ2UiLCJlbmFibGVQZXJmb3JtYW5jZUxvZ2dpbmciLCJsb2dzIiwicGVyZm9ybWFuY2UiLCJJT1NQZXJmb3JtYW5jZUxvZyIsInN0YXJ0Q2FwdHVyZSIsImdldFdpbmRvd0hhbmRsZSIsImlzV2ViQ29udGV4dCIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJnZXRXaW5kb3dIYW5kbGVzIiwid2luZG93SGFuZGxlQ2FjaGUiLCJsaXN0V2ViRnJhbWVzIiwiaWRBcnJheSIsInNldFdpbmRvdyIsIk5vU3VjaFdpbmRvd0Vycm9yIiwiY3VyV2luZG93SGFuZGxlIiwid2ViQ29udGV4dEluZGV4IiwiaW5pdEF1dG9XZWJ2aWV3IiwiYXV0b1dlYnZpZXciLCJuYXZUb0luaXRpYWxXZWJ2aWV3IiwidXNlVXJsIiwid2Vidmlld3MiLCJjdHhzIiwicHVzaCIsImdldE5ld1JlbW90ZURlYnVnZ2VyIiwiUmVtb3RlRGVidWdnZXIiLCJidW5kbGVJZCIsInVzZU5ld1NhZmFyaSIsInBhZ2VMb2FkTXMiLCJwbGF0Zm9ybVZlcnNpb24iLCJyZW1vdGVEZWJ1Z1Byb3h5IiwiZ2FyYmFnZUNvbGxlY3RPbkV4ZWN1dGUiLCJ1dGlsIiwiaGFzVmFsdWUiLCJzYWZhcmlHYXJiYWdlQ29sbGVjdCIsImVycm9yQW5kVGhyb3ciLCJnZXRDdXJyZW50VXJsIiwiY3VycmVudFVybCIsInVuZGVmaW5lZCIsInBhZ2VBcnJheSIsInBhZ2VBcnJheUZyb21Kc29uIiwiaWdub3JlQWJvdXRCbGFua1VybCIsInNlbGVjdEFwcCIsIndlYnZpZXdDb25uZWN0UmV0cmllcyIsIldlYktpdFJlbW90ZURlYnVnZ2VyIiwicG9ydCIsIndlYmtpdERlYnVnUHJveHlQb3J0Iiwid2Via2l0UmVzcG9uc2VUaW1lb3V0IiwiZXJyIiwibWVzc2FnZSIsIndhcm4iLCJhcHBJbmZvIiwib24iLCJFVkVOVF9QQUdFX0NIQU5HRSIsIm9uUGFnZUNoYW5nZSIsImJpbmQiLCJFVkVOVF9GUkFNRVNfREVUQUNIRUQiLCJpc0VtcHR5IiwiY3VyV2ViRnJhbWVzIiwibGVuZ3RoIiwiam9pbiIsInRyeUNsb3NpbmdBbGVydCIsImRpZERpc21pc3MiLCJjbG9zZUFsZXJ0QmVmb3JlVGVzdCIsIkVycm9yIiwicGFnZUNoYW5nZU5vdGlmaWNhdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZWxlY3RpbmdOZXdQYWdlIiwiaXNDb25uZWN0ZWQiLCJuZXdJZHMiLCJuZXdQYWdlcyIsImtleUlkIiwicGFnZSIsImlzS2V5IiwiY3VyQXBwSWRLZXkiLCJjdXJQYWdlSWRLZXkiLCJuZXdQYWdlIiwibGFzdCIsImVycm9yIiwic2V0Q3VycmVudFVybCIsIm5lZWRzUGFnZUxvYWQiLCJjb250ZXh0QXJyYXkiLCJpc0VxdWFsIiwiZmluZCIsInBhZ2VMb2FkIiwiY3VycmVudFBhZ2VJZCIsInAiLCJnZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlIiwicmVnRXhwIiwibWF0Y2hpbmdDdHgiLCJjdHgiLCJtYXRjaCIsInBhcnNlRmxvYXQiLCJpb3NTZGtWZXJzaW9uIiwiYXBwIiwidG9Mb3dlckNhc2UiLCJzYWZhcmkiLCJ0aW1lb3V0IiwiQiIsImRlbGF5IiwidHlwZUFuZE5hdlRvVXJsIiwibmF2VG9WaWV3VGhyb3VnaEZhdm9yaXRlcyIsIm5hdlRvVmlld1dpdGhUaXRsZSIsIm9wZW5OZXdQYWdlIiwibmV3UGFnZUJ1dHRvbiIsImZpbmRFbGVtZW50IiwibmF0aXZlVGFwIiwiRUxFTUVOVCIsImFkZHJlc3MiLCJjYXBzIiwic2FmYXJpSW5pdGlhbFVybCIsInRyaWVzIiwiTUFYX1RSSUVTIiwibmF2aWdhdGUiLCJvbGRJbXBXYWl0IiwiaW1wbGljaXRXYWl0TXMiLCJlbCIsInNldFZhbHVlSW1tZWRpYXRlIiwiUmVnRXhwIiwicGFnZVVubG9hZCIsIm1zZyIsInRpdGxlUmVnZXgiLCJ1cmxSZWdFeHAiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJzcGluVGltZSIsInNwaW5IYW5kbGVzIiwicmVzIiwic3RhY2siLCJsYXRlc3RXaW5kb3ciLCJjYW5jZWxQYWdlTG9hZCIsImVsZW1lbnQiLCJmaW5kVUlFbGVtZW50T3JFbGVtZW50cyIsInByZXNlbnQiLCJ1aUF1dG9DbGllbnQiLCJzZW5kQ29tbWFuZCIsInN0b3BSZW1vdGUiLCJjbG9zZVdpbmRvd0JlZm9yZURpc2Nvbm5lY3RpbmciLCJjbG9zZVdpbmRvdyIsImN1cldlYkNvb3JkcyIsIl9jdXJyZW50VXJsIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFVBQVUsR0FBRyxZQUFuQjs7QUFDQSxNQUFNQyxXQUFXLEdBQUcsU0FBcEI7O0FBQ0EsTUFB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eUI7QUFDOUMsU0FBTyxDQUFDLENBQUMsS0FBSzdDLFVBQVAsSUFBcUIsS0FBS0EsVUFBTCxLQUFvQlAsVUFBaEQ7QUFDRCxDQUZEOztBQUlBSSxPQUFPLENBQUN5SCxhQUFSLEdBQXdCLFNBQVNBLGFBQVQsQ0FBd0J4RyxHQUF4QixFQUE2QjtBQUNuRCxPQUFLc0ssV0FBTCxHQUFtQnRLLEdBQW5CO0FBQ0QsQ0FGRDs7QUFJQWpCLE9BQU8sQ0FBQzZFLGFBQVIsR0FBd0IsU0FBU0EsYUFBVCxHQUEwQjtBQUNoRCxTQUFPLEtBQUswRyxXQUFaO0FBQ0QsQ0FGRDs7QUFLQUMsTUFBTSxDQUFDQyxNQUFQLENBQWN4TCxVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgUmVtb3RlRGVidWdnZXIsIFdlYktpdFJlbW90ZURlYnVnZ2VyIH0gZnJvbSAnYXBwaXVtLXJlbW90ZS1kZWJ1Z2dlcic7XG5pbXBvcnQgSU9TUGVyZm9ybWFuY2VMb2cgZnJvbSAnLi4vZGV2aWNlLWxvZy9pb3MtcGVyZm9ybWFuY2UtbG9nJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmNvbnN0IE5BVElWRV9XSU4gPSAnTkFUSVZFX0FQUCc7XG5jb25zdCBXRUJWSUVXX1dJTiA9ICdXRUJWSUVXJztcbmNvbnN0IFdFQlZJRVdfQkFTRSA9IGAke1dFQlZJRVdfV0lOfV9gO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmdldEN1cnJlbnRDb250ZXh0ID0gYXN5bmMgZnVuY3Rpb24gZ2V0Q3VycmVudENvbnRleHQgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgaWYgKHRoaXMuY3VyQ29udGV4dCAmJiB0aGlzLmN1ckNvbnRleHQgIT09IE5BVElWRV9XSU4pIHtcbiAgICByZXR1cm4gYCR7V0VCVklFV19CQVNFfSR7dGhpcy5jdXJDb250ZXh0fWA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE5BVElWRV9XSU47XG4gIH1cbn07XG5cbmNvbW1hbmRzLmdldENvbnRleHRzID0gYXN5bmMgZnVuY3Rpb24gZ2V0Q29udGV4dHMgKCkge1xuICBsb2dnZXIuZGVidWcoJ0dldHRpbmcgbGlzdCBvZiBhdmFpbGFibGUgY29udGV4dHMnKTtcbiAgbGV0IGNvbnRleHRzID0gYXdhaXQgdGhpcy5nZXRDb250ZXh0c0FuZFZpZXdzKGZhbHNlKTtcblxuICBsZXQgbWFwRm4gPSAoY29udGV4dCkgPT4gY29udGV4dC5pZC50b1N0cmluZygpO1xuICBpZiAodGhpcy5vcHRzLmZ1bGxDb250ZXh0TGlzdCkge1xuICAgIG1hcEZuID0gKGNvbnRleHQpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBjb250ZXh0LmlkLnRvU3RyaW5nKCksXG4gICAgICAgIHRpdGxlOiBjb250ZXh0LnZpZXcudGl0bGUsXG4gICAgICAgIHVybDogY29udGV4dC52aWV3LnVybCxcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICByZXR1cm4gY29udGV4dHMubWFwKG1hcEZuKTtcbn07XG5cbmNvbW1hbmRzLnNldENvbnRleHQgPSBhc3luYyBmdW5jdGlvbiBzZXRDb250ZXh0IChuYW1lLCBjYWxsYmFjaywgc2tpcFJlYWR5Q2hlY2spIHtcbiAgZnVuY3Rpb24gYWxyZWFkeUluQ29udGV4dCAoZGVzaXJlZCwgY3VycmVudCkge1xuICAgIHJldHVybiAoZGVzaXJlZCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAoZGVzaXJlZCA9PT0gbnVsbCAmJiBjdXJyZW50ID09PSBOQVRJVkVfV0lOKSB8fFxuICAgICAgICAgICAoZGVzaXJlZCA9PT0gTkFUSVZFX1dJTiAmJiBjdXJyZW50ID09PSBudWxsKSk7XG4gIH1cblxuICBsb2dnZXIuZGVidWcoYEF0dGVtcHRpbmcgdG8gc2V0IGNvbnRleHQgdG8gJyR7bmFtZX0nYCk7XG4gIGlmIChhbHJlYWR5SW5Db250ZXh0KG5hbWUsIHRoaXMuY3VyQ29udGV4dCkpIHtcbiAgICAvLyBhbHJlYWR5IGluIHRoZSBuYW1lZCBjb250ZXh0LCBubyBuZWVkIHRvIGRvIGFueXRoaW5nXG4gIH0gZWxzZSBpZiAobmFtZSA9PT0gTkFUSVZFX1dJTiB8fCBuYW1lID09PSBudWxsKSB7XG4gICAgLy8gc3dpdGNoaW5nIGludG8gdGhlIG5hdGl2ZSBjb250ZXh0XG4gICAgdGhpcy5jdXJDb250ZXh0ID0gbnVsbDtcbiAgICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgICAgdGhpcy5yZW1vdGUuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBzd2l0Y2hpbmcgaW50byBhIHdlYnZpZXcgY29udGV4dFxuXG4gICAgLy8gaWYgY29udGV4dHMgaGF2ZSBub3QgYWxyZWFkeSBiZWVuIHJldHJpZXZlZCwgZ2V0IHRoZW1cbiAgICBpZiAoXy5pc1VuZGVmaW5lZCh0aGlzLmNvbnRleHRzKSkge1xuICAgICAgYXdhaXQgdGhpcy5nZXRDb250ZXh0cygpO1xuICAgIH1cblxuICAgIGxldCBjb250ZXh0SWQgPSBuYW1lLnJlcGxhY2UoV0VCVklFV19CQVNFLCAnJyk7XG4gICAgaWYgKGNvbnRleHRJZCA9PT0gJycpIHtcbiAgICAgIC8vIGFsbG93IHVzZXIgdG8gcGFzcyBpbiBcIldFQlZJRVdcIiB3aXRob3V0IGFuIGluZGV4XG4gICAgICAvLyB0aGUgc2Vjb25kIGNvbnRleHQgd2lsbCBiZSB0aGUgZmlyc3Qgd2VidmlldyBhc1xuICAgICAgLy8gdGhlIGZpcnN0IGlzIGFsd2F5cyBOQVRJVkVfQVBQXG4gICAgICBjb250ZXh0SWQgPSB0aGlzLmNvbnRleHRzWzFdO1xuICAgIH1cbiAgICBpZiAoIV8uaW5jbHVkZXModGhpcy5jb250ZXh0cywgY29udGV4dElkKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hDb250ZXh0RXJyb3IoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgICAgaWYgKHRoaXMucmVtb3RlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucmVtb3RlLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VyQ29udGV4dCA9IGNvbnRleHRJZDtcbiAgICAgIGF3YWl0IHRoaXMucmVtb3RlLmNvbm5lY3QoY29udGV4dElkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYGNvbnRleHRJZGAgd2lsbCBiZSBpbiB0aGUgZm9ybSBvZiBgYXBwSWQucGFnZUlkYCBpbiB0aGlzIGNhc2VcbiAgICAgIGxldCBbYXBwSWRLZXksIHBhZ2VJZEtleV0gPSBfLm1hcChjb250ZXh0SWQuc3BsaXQoJy4nKSwgKGlkKSA9PiBwYXJzZUludChpZCwgMTApKTtcbiAgICAgIGF3YWl0IHRoaXMucmVtb3RlLnNlbGVjdFBhZ2UoYXBwSWRLZXksIHBhZ2VJZEtleSwgc2tpcFJlYWR5Q2hlY2spO1xuICAgICAgdGhpcy5jdXJDb250ZXh0ID0gY29udGV4dElkO1xuICAgIH1cbiAgfVxuXG4gIC8vIGF0dGVtcHQgdG8gc3RhcnQgcGVyZm9ybWFuY2UgbG9nZ2luZywgaWYgcmVxdWVzdGVkXG4gIGlmICh0aGlzLm9wdHMuZW5hYmxlUGVyZm9ybWFuY2VMb2dnaW5nICYmIHRoaXMucmVtb3RlKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBTdGFydGluZyBwZXJmb3JtYW5jZSBsb2cgb24gJyR7dGhpcy5jdXJDb250ZXh0fSdgKTtcbiAgICB0aGlzLmxvZ3MucGVyZm9ybWFuY2UgPSBuZXcgSU9TUGVyZm9ybWFuY2VMb2codGhpcy5yZW1vdGUpO1xuICAgIGF3YWl0IHRoaXMubG9ncy5wZXJmb3JtYW5jZS5zdGFydENhcHR1cmUoKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0V2luZG93SGFuZGxlID0gYXN5bmMgZnVuY3Rpb24gZ2V0V2luZG93SGFuZGxlICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG4gIHJldHVybiB0aGlzLmN1ckNvbnRleHQudG9TdHJpbmcoKTtcbn07XG5cbmNvbW1hbmRzLmdldFdpbmRvd0hhbmRsZXMgPSBhc3luYyBmdW5jdGlvbiBnZXRXaW5kb3dIYW5kbGVzICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICB0aGlzLndpbmRvd0hhbmRsZUNhY2hlID0gYXdhaXQgdGhpcy5saXN0V2ViRnJhbWVzKGZhbHNlKTtcbiAgY29uc3QgaWRBcnJheSA9IF8ubWFwKHRoaXMud2luZG93SGFuZGxlQ2FjaGUsICdpZCcpO1xuICAvLyBzaW5jZSB3ZSB1c2UgdGhpcy5jb250ZXh0cyB0byBtYW5hZ2Ugc2VsZWN0aW5nIGRlYnVnZ2VyIHBhZ2VzLCBtYWtlXG4gIC8vIHN1cmUgaXQgZ2V0cyBwb3B1bGF0ZWQgZXZlbiBpZiBzb21lb25lIGRpZCBub3QgdXNlIHRoZVxuICAvLyBnZXRDb250ZXh0cyBtZXRob2RcbiAgaWYgKCF0aGlzLmNvbnRleHRzKSB7XG4gICAgdGhpcy5jb250ZXh0cyA9IGlkQXJyYXk7XG4gIH1cbiAgcmV0dXJuIF8ubWFwKGlkQXJyYXksIChpZCkgPT4gaWQudG9TdHJpbmcoKSk7XG59O1xuXG5jb21tYW5kcy5zZXRXaW5kb3cgPSBhc3luYyBmdW5jdGlvbiBzZXRXaW5kb3cgKG5hbWUsIHNraXBSZWFkeUNoZWNrKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgaWYgKCFfLmluY2x1ZGVzKF8ubWFwKHRoaXMud2luZG93SGFuZGxlQ2FjaGUsICdpZCcpLCBuYW1lKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoV2luZG93RXJyb3IoKTtcbiAgfVxuICBsZXQgcGFnZUlkS2V5ID0gcGFyc2VJbnQobmFtZSwgMTApO1xuICBpZiAoIXRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICBhd2FpdCB0aGlzLnJlbW90ZS5zZWxlY3RQYWdlKHBhZ2VJZEtleSwgc2tpcFJlYWR5Q2hlY2spO1xuICAgIHRoaXMuY3VyQ29udGV4dCA9IHRoaXMuY3VyV2luZG93SGFuZGxlID0gbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAobmFtZSA9PT0gdGhpcy5jdXJXaW5kb3dIYW5kbGUpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgUmVtb3RlIGRlYnVnZ2VyIGlzIGFscmVhZHkgY29ubmVjdGVkIHRvIHdpbmRvdyAnJHtuYW1lfSdgKTtcbiAgICB9IGVsc2UgaWYgKCFfLmluY2x1ZGVzKF8ubWFwKHRoaXMud2luZG93SGFuZGxlQ2FjaGUsICdpZCcpLCBuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hXaW5kb3dFcnJvcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLnJlbW90ZS5kaXNjb25uZWN0KCk7XG4gICAgICB0aGlzLmN1ckNvbnRleHQgPSB0aGlzLmN1cldpbmRvd0hhbmRsZSA9IG5hbWU7XG4gICAgICBhd2FpdCB0aGlzLnJlbW90ZS5jb25uZWN0KG5hbWUpO1xuICAgIH1cbiAgfVxufTtcblxuaGVscGVycy53ZWJDb250ZXh0SW5kZXggPSBmdW5jdGlvbiB3ZWJDb250ZXh0SW5kZXggKCkge1xuICByZXR1cm4gdGhpcy5jdXJDb250ZXh0LnJlcGxhY2UoV0VCVklFV19CQVNFLCAnJykgLSAxO1xufTtcblxuZXh0ZW5zaW9ucy5pbml0QXV0b1dlYnZpZXcgPSBhc3luYyBmdW5jdGlvbiBpbml0QXV0b1dlYnZpZXcgKCkge1xuICBpZiAodGhpcy5vcHRzLmF1dG9XZWJ2aWV3KSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdTZXR0aW5nIGF1dG8gd2VidmlldycpO1xuICAgIGF3YWl0IHRoaXMubmF2VG9Jbml0aWFsV2Vidmlldyh0aGlzKTtcbiAgfVxufTtcblxuZXh0ZW5zaW9ucy5nZXRDb250ZXh0c0FuZFZpZXdzID0gYXN5bmMgZnVuY3Rpb24gZ2V0Q29udGV4dHNBbmRWaWV3cyAodXNlVXJsID0gdHJ1ZSkge1xuICBsb2dnZXIuZGVidWcoJ1JldHJpZXZpbmcgY29udGV4dHMgYW5kIHZpZXdzJyk7XG4gIGxldCB3ZWJ2aWV3cyA9IGF3YWl0IHRoaXMubGlzdFdlYkZyYW1lcyh1c2VVcmwpO1xuXG4gIGxldCBjdHhzID0gW3tpZDogTkFUSVZFX1dJTiwgdmlldzoge319XTtcbiAgdGhpcy5jb250ZXh0cyA9IFtOQVRJVkVfV0lOXTtcbiAgZm9yIChsZXQgdmlldyBvZiB3ZWJ2aWV3cykge1xuICAgIGN0eHMucHVzaCh7aWQ6IGAke1dFQlZJRVdfQkFTRX0ke3ZpZXcuaWR9YCwgdmlld30pO1xuICAgIHRoaXMuY29udGV4dHMucHVzaCh2aWV3LmlkLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBjdHhzO1xufTtcblxuZXh0ZW5zaW9ucy5nZXROZXdSZW1vdGVEZWJ1Z2dlciA9IGFzeW5jIGZ1bmN0aW9uIGdldE5ld1JlbW90ZURlYnVnZ2VyICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIHJldHVybiBuZXcgUmVtb3RlRGVidWdnZXIoe1xuICAgIGJ1bmRsZUlkOiB0aGlzLm9wdHMuYnVuZGxlSWQsXG4gICAgdXNlTmV3U2FmYXJpOiB0aGlzLnVzZU5ld1NhZmFyaSgpLFxuICAgIHBhZ2VMb2FkTXM6IHRoaXMucGFnZUxvYWRNcyxcbiAgICBwbGF0Zm9ybVZlcnNpb246IHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24sXG4gICAgcmVtb3RlRGVidWdQcm94eTogdGhpcy5vcHRzLnJlbW90ZURlYnVnUHJveHksXG4gICAgZ2FyYmFnZUNvbGxlY3RPbkV4ZWN1dGU6IHV0aWwuaGFzVmFsdWUodGhpcy5vcHRzLnNhZmFyaUdhcmJhZ2VDb2xsZWN0KVxuICAgICAgPyAhIXRoaXMub3B0cy5zYWZhcmlHYXJiYWdlQ29sbGVjdFxuICAgICAgOiB0cnVlLFxuICB9KTtcbn07XG5cbmV4dGVuc2lvbnMubGlzdFdlYkZyYW1lcyA9IGFzeW5jIGZ1bmN0aW9uIGxpc3RXZWJGcmFtZXMgKHVzZVVybCA9IHRydWUpIHtcbiAgaWYgKCF0aGlzLm9wdHMuYnVuZGxlSWQpIHtcbiAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdygnQ2Fubm90IGVudGVyIHdlYiBmcmFtZSB3aXRob3V0IGEgYnVuZGxlIElEJyk7XG4gIH1cblxuICB1c2VVcmwgPSB1c2VVcmwgJiYgISF0aGlzLmdldEN1cnJlbnRVcmwoKTtcbiAgbG9nZ2VyLmRlYnVnKGBTZWxlY3RpbmcgYnkgdXJsOiAke3VzZVVybH0gJHt1c2VVcmwgPyBgKGV4cGVjdGVkIHVybDogJyR7dGhpcy5nZXRDdXJyZW50VXJsKCl9JylgIDogJyd9YCk7XG5cbiAgbGV0IGN1cnJlbnRVcmwgPSB1c2VVcmwgPyB0aGlzLmdldEN1cnJlbnRVcmwoKSA6IHVuZGVmaW5lZDtcbiAgbGV0IHBhZ2VBcnJheTtcbiAgaWYgKHRoaXMuaXNSZWFsRGV2aWNlKCkgJiYgdGhpcy5yZW1vdGUgJiYgdGhpcy5vcHRzLmJ1bmRsZUlkKSB7XG4gICAgLy8gcmVhbCBkZXZpY2UsIGFuZCBhbHJlYWR5IGNvbm5lY3RlZFxuICAgIHBhZ2VBcnJheSA9IGF3YWl0IHRoaXMucmVtb3RlLnBhZ2VBcnJheUZyb21Kc29uKHRoaXMub3B0cy5pZ25vcmVBYm91dEJsYW5rVXJsKTtcbiAgfSBlbHNlIGlmICh0aGlzLnJlbW90ZSAmJiB0aGlzLnJlbW90ZS5hcHBJZEtleSkge1xuICAgIC8vIHNpbXVsYXRvciwgYW5kIGFscmVhZHkgY29ubmVjdGVkXG4gICAgcGFnZUFycmF5ID0gYXdhaXQgdGhpcy5yZW1vdGUuc2VsZWN0QXBwKGN1cnJlbnRVcmwsIHRoaXMub3B0cy53ZWJ2aWV3Q29ubmVjdFJldHJpZXMsIHRoaXMub3B0cy5pZ25vcmVBYm91dEJsYW5rVXJsKTtcbiAgfSBlbHNlIGlmICh0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgLy8gcmVhbCBkZXZpY2UsIGFuZCBub3QgY29ubmVjdGVkXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucmVtb3RlID0gbmV3IFdlYktpdFJlbW90ZURlYnVnZ2VyKHtcbiAgICAgICAgcG9ydDogdGhpcy5vcHRzLndlYmtpdERlYnVnUHJveHlQb3J0LFxuICAgICAgICB3ZWJraXRSZXNwb25zZVRpbWVvdXQ6IHRoaXMub3B0cy53ZWJraXRSZXNwb25zZVRpbWVvdXQsXG4gICAgICB9KTtcbiAgICAgIHBhZ2VBcnJheSA9IGF3YWl0IHRoaXMucmVtb3RlLnBhZ2VBcnJheUZyb21Kc29uKHRoaXMub3B0cy5pZ25vcmVBYm91dEJsYW5rVXJsKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGl0IGlzIHJlYXNvbmFibGUgdG8gZXhwZWN0IHRoYXQgdGhpcyBtaWdodCBiZSBjYWxsZWQgd2hlbiB0aGVyZSBpcyBub1xuICAgICAgLy8gd2Via2l0IHJlbW90ZSBkZWJ1Z2dlciB0byBjb25uZWN0IHRvXG4gICAgICBpZiAoIV8uaW5jbHVkZXMoZXJyLm1lc3NhZ2UsICdjb25uZWN0IEVDT05OUkVGVVNFRCcpKSB0aHJvdyBlcnI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcblxuICAgICAgbG9nZ2VyLndhcm4oJ0F0dGVtcHRlZCB0byBnZXQgYSBsaXN0IG9mIHdlYnZpZXcgY29udGV4dHMgYnV0IGNvdWxkIG5vdCBjb25uZWN0IHRvICcgK1xuICAgICAgICAgICAgICAgICAgJ2lvcy13ZWJraXQtZGVidWctcHJveHkuIElmIHlvdSBleHBlY3QgdG8gZmluZCB3ZWJ2aWV3cywgcGxlYXNlIGVuc3VyZSAnICtcbiAgICAgICAgICAgICAgICAgICd0aGF0IHRoZSBwcm94eSBpcyBydW5uaW5nIGFuZCBhY2Nlc3NpYmxlJyk7XG4gICAgICB0aGlzLnJlbW90ZSA9IG51bGw7XG4gICAgICBwYWdlQXJyYXkgPSBbXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gc2ltdWxhdG9yLCBhbmQgbm90IGNvbm5lY3RlZFxuICAgIHRoaXMucmVtb3RlID0gYXdhaXQgdGhpcy5nZXROZXdSZW1vdGVEZWJ1Z2dlcigpO1xuXG4gICAgbGV0IGFwcEluZm8gPSBhd2FpdCB0aGlzLnJlbW90ZS5jb25uZWN0KCk7XG4gICAgaWYgKCFhcHBJbmZvKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ1VuYWJsZSB0byBjb25uZWN0IHRvIHRoZSByZW1vdGUgZGVidWdnZXIuJyk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHBhZ2VBcnJheSA9IGF3YWl0IHRoaXMucmVtb3RlLnNlbGVjdEFwcChjdXJyZW50VXJsLCB0aGlzLm9wdHMud2Vidmlld0Nvbm5lY3RSZXRyaWVzLCB0aGlzLm9wdHMuaWdub3JlQWJvdXRCbGFua1VybCk7XG4gICAgdGhpcy5yZW1vdGUub24oUmVtb3RlRGVidWdnZXIuRVZFTlRfUEFHRV9DSEFOR0UsIHRoaXMub25QYWdlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgIHRoaXMucmVtb3RlLm9uKFJlbW90ZURlYnVnZ2VyLkVWRU5UX0ZSQU1FU19ERVRBQ0hFRCwgKCkgPT4ge1xuICAgICAgaWYgKCFfLmlzRW1wdHkodGhpcy5jdXJXZWJGcmFtZXMpKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgQ2xlYXJpbmcgJHt0aGlzLmN1cldlYkZyYW1lcy5sZW5ndGh9IGZyYW1lczogJHt0aGlzLmN1cldlYkZyYW1lcy5qb2luKCcsICcpfWApO1xuICAgICAgfVxuICAgICAgdGhpcy5jdXJXZWJGcmFtZXMgPSBbXTtcbiAgICB9KTtcblxuICAgIGxldCB0cnlDbG9zaW5nQWxlcnQgPSBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgZGlkRGlzbWlzcyA9IGF3YWl0IHRoaXMuY2xvc2VBbGVydEJlZm9yZVRlc3QoKTtcbiAgICAgIGlmICghZGlkRGlzbWlzcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nsb3NlIGFsZXJ0IGZhaWxlZC4gUmV0cnkuJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgzLCA0MDAwLCB0cnlDbG9zaW5nQWxlcnQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gaWYgdGhlIGxvb3AgdG8gY2xvc2UgYWxlcnRzIGZhaWxlZCB0byBkaXNtaXNzLCBpZ25vcmUsXG4gICAgICAvLyBvdGhlcndpc2UgbG9nIGFuZCB0aHJvdyB0aGUgZXJyb3JcbiAgICAgIGlmIChlcnIubWVzc2FnZSAhPT0gJ0Nsb3NlIGFsZXJ0IGZhaWxlZC4gUmV0cnkuJykge1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChwYWdlQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gd2UgaGF2ZSBubyB3ZWIgZnJhbWVzLCBidXQgY29udGludWUgYW55d2F5XG4gICAgbG9nZ2VyLmRlYnVnKCdObyB3ZWIgZnJhbWVzIGZvdW5kLicpO1xuICB9XG4gIHJldHVybiBwYWdlQXJyYXk7XG59O1xuXG5leHRlbnNpb25zLm9uUGFnZUNoYW5nZSA9IGFzeW5jIGZ1bmN0aW9uIG9uUGFnZUNoYW5nZSAocGFnZUNoYW5nZU5vdGlmaWNhdGlvbikge1xuICBsb2dnZXIuZGVidWcoYFJlbW90ZSBkZWJ1Z2dlciBub3RpZmllZCB1cyBvZiBhIG5ldyBwYWdlIGxpc3Rpbmc6ICR7SlNPTi5zdHJpbmdpZnkocGFnZUNoYW5nZU5vdGlmaWNhdGlvbil9YCk7XG4gIGlmICh0aGlzLnNlbGVjdGluZ05ld1BhZ2UpIHtcbiAgICBsb2dnZXIuZGVidWcoJ1dlIGFyZSBpbiB0aGUgbWlkZGxlIG9mIHNlbGVjdGluZyBhIHBhZ2UsIGlnbm9yaW5nJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghdGhpcy5yZW1vdGUgfHwgIXRoaXMucmVtb3RlLmlzQ29ubmVjdGVkKCkpIHtcbiAgICBsb2dnZXIuZGVidWcoJ1dlIGhhdmUgbm90IHlldCBjb25uZWN0ZWQsIGlnbm9yaW5nJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qge2FwcElkS2V5LCBwYWdlQXJyYXl9ID0gcGFnZUNoYW5nZU5vdGlmaWNhdGlvbjtcblxuICBsZXQgbmV3SWRzID0gW107XG4gIGxldCBuZXdQYWdlcyA9IFtdO1xuICBsZXQga2V5SWQgPSBudWxsO1xuICBmb3IgKGNvbnN0IHBhZ2Ugb2YgcGFnZUFycmF5KSB7XG4gICAgY29uc3QgaWQgPSBwYWdlLmlkLnRvU3RyaW5nKCk7XG4gICAgbmV3SWRzLnB1c2goaWQpO1xuICAgIGlmIChwYWdlLmlzS2V5KSB7XG4gICAgICBrZXlJZCA9IGlkO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0SWQgPSBgJHthcHBJZEtleX0uJHtpZH1gO1xuXG4gICAgLy8gYWRkIGlmIHRoaXMgaXMgYSBuZXcgcGFnZVxuICAgIGlmICghXy5pbmNsdWRlcyh0aGlzLmNvbnRleHRzLCBjb250ZXh0SWQpKSB7XG4gICAgICBuZXdQYWdlcy5wdXNoKGlkKTtcbiAgICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0SWQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICgha2V5SWQpIHtcbiAgICAvLyBpZiB0aGVyZSBpcyBubyBrZXkgaWQsIHB1bGwgdGhlIGZpcnN0IGlkIGZyb20gdGhlIHBhZ2UgYXJyYXkgYW5kIHVzZSB0aGF0XG4gICAgLy8gYXMgYSBzdGFuZCBpblxuICAgIGxvZ2dlci5kZWJ1ZygnTm8ga2V5IGlkIGZvdW5kLiBDaG9vc2luZyBmaXJzdCBpZCBmcm9tIHBhZ2UgYXJyYXknKTtcbiAgICBrZXlJZCA9IG5ld0lkc1swXSB8fCBudWxsO1xuICB9XG5cbiAgaWYgKCF1dGlsLmhhc1ZhbHVlKHRoaXMuY3VyQ29udGV4dCkpIHtcbiAgICBsb2dnZXIuZGVidWcoJ1dlIGRvIG5vdCBhcHBlYXIgdG8gaGF2ZSB3aW5kb3cgc2V0IHlldCwgaWdub3JpbmcnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBbY3VyQXBwSWRLZXksIGN1clBhZ2VJZEtleV0gPSB0aGlzLmN1ckNvbnRleHQuc3BsaXQoJy4nKTtcblxuICBpZiAoY3VyQXBwSWRLZXkgIT09IGFwcElkS2V5KSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdQYWdlIGNoYW5nZSBub3QgcmVmZXJyaW5nIHRvIGN1cnJlbnRseSBzZWxlY3RlZCBhcHAsIGlnbm9yaW5nLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBuZXdQYWdlID0gbnVsbDtcbiAgaWYgKG5ld1BhZ2VzLmxlbmd0aCkge1xuICAgIG5ld1BhZ2UgPSBfLmxhc3QobmV3UGFnZXMpO1xuICAgIGxvZ2dlci5kZWJ1ZyhgV2UgaGF2ZSBuZXcgcGFnZXMsIHNlbGVjdGluZyBwYWdlICcke25ld1BhZ2V9J2ApO1xuICB9IGVsc2UgaWYgKCFfLmluY2x1ZGVzKG5ld0lkcywgY3VyUGFnZUlkS2V5KSkge1xuICAgIGxvZ2dlci5kZWJ1ZygnTmV3IHBhZ2UgbGlzdGluZyBmcm9tIHJlbW90ZSBkZWJ1Z2dlciBkb2VzIG5vdCBjb250YWluICcgK1xuICAgICAgICAgICAgICAgICAnY3VycmVudCB3aW5kb3c7IGFzc3VtaW5nIGl0IGlzIGNsb3NlZCcpO1xuICAgIGlmICghdXRpbC5oYXNWYWx1ZShrZXlJZCkpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRG8gbm90IGhhdmUgb3VyIGN1cnJlbnQgd2luZG93IGFueW1vcmUsIGFuZCB0aGVyZSAnICtcbiAgICAgICAgICAgICAgICAgICAnYXJlIG5vdCBhbnkgbW9yZSB0byBsb2FkISBEb2luZyBub3RoaW5nLi4uJyk7XG4gICAgICB0aGlzLnNldEN1cnJlbnRVcmwodW5kZWZpbmVkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2dnZXIuZGVidWcoYERlYnVnZ2VyIGFscmVhZHkgc2VsZWN0ZWQgcGFnZSAnJHtrZXlJZH0nLCBgICtcbiAgICAgICAgICAgICAgICAgYGNvbmZpcm1pbmcgdGhhdCBjaG9pY2UuYCk7XG4gICAgdGhpcy5jdXJDb250ZXh0ID0gYCR7YXBwSWRLZXl9LiR7a2V5SWR9YDtcbiAgICBuZXdQYWdlID0ga2V5SWQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gYXQgdGhpcyBwb2ludCwgdGhlcmUgYXJlIG5vIG5ldyBwYWdlcywgYW5kIHRoZSBjdXJyZW50IHBhZ2Ugc3RpbGwgZXhpc3RzXG4gICAgbG9nZ2VyLmRlYnVnKCdDaGVja2luZyBpZiBwYWdlIG5lZWRzIHRvIGxvYWQnKTtcbiAgICAvLyBJZiBhIHdpbmRvdyBuYXZpZ2F0ZXMgdG8gYW4gYW5jaG9yIGl0IGRvZXNuJ3QgYWx3YXlzIGZpcmUgYSBwYWdlXG4gICAgLy8gY2FsbGJhY2sgZXZlbnQuIExldCdzIGNoZWNrIGlmIHdlIHdvdW5kIHVwIGluIHN1Y2ggYSBzaXR1YXRpb24uXG4gICAgY29uc3QgbmVlZHNQYWdlTG9hZCA9ICgoKSA9PiB7XG4gICAgICAvLyBuZWVkIHRvIG1hcCB0aGUgcGFnZSBpZHMgdG8gY29udGV4dCBpZHNcbiAgICAgIGNvbnN0IGNvbnRleHRBcnJheSA9IF8ubWFwKHBhZ2VBcnJheSwgKHBhZ2UpID0+IGAke2FwcElkS2V5fS4ke3BhZ2UuaWR9YCk7XG4gICAgICAvLyBjaGVjayBpZiB0aGUgY3VycmVudCBjb250ZXh0IGV4aXN0cyBpbiBib3RoIG91ciByZWNvcmRlZCBjb250ZXh0cyxcbiAgICAgIC8vIGFuZCB0aGUgcGFnZSBhcnJheVxuICAgICAgcmV0dXJuICFfLmlzRXF1YWwoXy5maW5kKHRoaXMuY29udGV4dHMsIHRoaXMuY3VyQ29udGV4dCksIF8uZmluZChjb250ZXh0QXJyYXksIHRoaXMuY3VyQ29udGV4dCkpO1xuICAgIH0pKCk7XG5cbiAgICBpZiAobmVlZHNQYWdlTG9hZCkge1xuICAgICAgbG9nZ2VyLmRlYnVnKCdQYWdlIGxvYWQgbmVlZGVkLiBMb2FkaW5nLi4uJyk7XG4gICAgICBhd2FpdCB0aGlzLnJlbW90ZS5wYWdlTG9hZCgpO1xuICAgIH1cblxuICAgIGxvZ2dlci5kZWJ1ZygnTmV3IHBhZ2UgbGlzdGluZyBpcyBzYW1lIGFzIG9sZCwgZG9pbmcgbm90aGluZycpO1xuICB9XG5cbiAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIHBhZ2UgbGlzdGluZyBpc24ndCBpbmRpY2F0aW5nIGEgcmVkaXJlY3RcbiAgaWYgKHV0aWwuaGFzVmFsdWUodGhpcy5jdXJDb250ZXh0KSkge1xuICAgIGxldCBjdXJyZW50UGFnZUlkID0gcGFyc2VJbnQoXy5sYXN0KHRoaXMuY3VyQ29udGV4dC5zcGxpdCgnLicpKSwgMTApO1xuICAgIGxldCBwYWdlID0gXy5maW5kKHBhZ2VBcnJheSwgKHApID0+IHBhcnNlSW50KHAuaWQsIDEwKSA9PT0gY3VycmVudFBhZ2VJZCk7XG4gICAgaWYgKHBhZ2UgJiYgcGFnZS51cmwgIT09IHRoaXMuZ2V0Q3VycmVudFVybCgpKSB7XG4gICAgICBsb2dnZXIuZGVidWcoYFJlZGlyZWN0ZWQgZnJvbSAnJHt0aGlzLmdldEN1cnJlbnRVcmwoKX0nIHRvICcke3BhZ2UudXJsfSdgKTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFVybChwYWdlLnVybCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHV0aWwuaGFzVmFsdWUobmV3UGFnZSkpIHtcbiAgICB0aGlzLnNlbGVjdGluZ05ld1BhZ2UgPSB0cnVlO1xuICAgIGF3YWl0IHRoaXMucmVtb3RlLnNlbGVjdFBhZ2UoYXBwSWRLZXksIHBhcnNlSW50KG5ld1BhZ2UsIDEwKSk7XG4gICAgdGhpcy5zZWxlY3RpbmdOZXdQYWdlID0gZmFsc2U7XG4gICAgdGhpcy5jdXJDb250ZXh0ID0gYCR7YXBwSWRLZXl9LiR7bmV3UGFnZX1gO1xuICB9XG4gIHRoaXMud2luZG93SGFuZGxlQ2FjaGUgPSBwYWdlQXJyYXk7XG59O1xuXG5leHRlbnNpb25zLmdldExhdGVzdFdlYnZpZXdDb250ZXh0Rm9yVGl0bGUgPSBhc3luYyBmdW5jdGlvbiBnZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlIChyZWdFeHApIHtcbiAgbGV0IGNvbnRleHRzID0gYXdhaXQgdGhpcy5nZXRDb250ZXh0c0FuZFZpZXdzKCk7XG4gIGxldCBtYXRjaGluZ0N0eDtcbiAgZm9yIChsZXQgY3R4IG9mIGNvbnRleHRzKSB7XG4gICAgaWYgKGN0eC52aWV3ICYmICgoY3R4LnZpZXcudGl0bGUgJiYgY3R4LnZpZXcudGl0bGUubWF0Y2gocmVnRXhwKSkgfHwgKGN0eC52aWV3LnVybCAmJiBjdHgudmlldy51cmwubWF0Y2gocmVnRXhwKSkpKSB7XG4gICAgICBpZiAoY3R4LnZpZXcudXJsICE9PSAnYWJvdXQ6YmxhbmsnKSB7XG4gICAgICAgIG1hdGNoaW5nQ3R4ID0gY3R4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW4gdGhlIGNhc2VzIG9mIFhjb2RlIDwgNSAoaS5lLiwgaU9TIFNESyBWZXJzaW9uIGxlc3MgdGhhbiA3KVxuICAgICAgICAvLyBpT1MgNy4xLCBpT1MgOS4wICYgaU9TIDkuMSBpbiBhIHdlYnZpZXcgKG5vdCBpbiBTYWZhcmkpXG4gICAgICAgIC8vIHdlIGNhbiBoYXZlIHRoZSB1cmwgYmUgYGFib3V0OmJsYW5rYFxuICAgICAgICBpZiAocGFyc2VGbG9hdCh0aGlzLmlvc1Nka1ZlcnNpb24pIDwgNyB8fCBwYXJzZUZsb2F0KHRoaXMuaW9zU2RrVmVyc2lvbikgPj0gOSB8fFxuICAgICAgICAgICAgKHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24gPT09ICc3LjEnICYmIHRoaXMub3B0cy5hcHAgJiYgdGhpcy5vcHRzLmFwcC50b0xvd2VyQ2FzZSgpICE9PSAnc2FmYXJpJykpIHtcbiAgICAgICAgICBtYXRjaGluZ0N0eCA9IGN0eDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXRjaGluZ0N0eCA/IG1hdGNoaW5nQ3R4LmlkIDogdW5kZWZpbmVkO1xufTtcblxuLy8gUmlnaHQgbm93IHdlIGRvbid0IG5lY2Vzc2FyaWx5IHdhaXQgZm9yIHdlYnZpZXdcbi8vIGFuZCBmcmFtZSB0byBsb2FkLCB3aGljaCBsZWFkcyB0byByYWNlIGNvbmRpdGlvbnMgYW5kIGZsYWtpbmVzcyxcbi8vIGxldCdzIHNlZSBpZiB3ZSBjYW4gdHJhbnNpdGlvbiB0byBzb21ldGhpbmcgYmV0dGVyXG5leHRlbnNpb25zLnVzZU5ld1NhZmFyaSA9IGZ1bmN0aW9uIHVzZU5ld1NhZmFyaSAoKSB7XG4gIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuaW9zU2RrVmVyc2lvbikgPj0gOC4xICYmXG4gICAgICAgICBwYXJzZUZsb2F0KHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24pID49IDguMSAmJlxuICAgICAgICAgIXRoaXMuaXNSZWFsRGV2aWNlKCkgJiZcbiAgICAgICAgIHRoaXMub3B0cy5zYWZhcmk7XG59O1xuXG5leHRlbnNpb25zLm5hdlRvSW5pdGlhbFdlYnZpZXcgPSBhc3luYyBmdW5jdGlvbiBuYXZUb0luaXRpYWxXZWJ2aWV3ICgpIHtcbiAgbGV0IHRpbWVvdXQgPSAwO1xuICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgIHRpbWVvdXQgPSAzMDAwO1xuICAgIGxvZ2dlci5kZWJ1ZyhgV2FpdGluZyBmb3IgJHt0aW1lb3V0fSBtcyBiZWZvcmUgbmF2aWdhdGluZyB0byB2aWV3LmApO1xuICB9XG4gIGF3YWl0IEIuZGVsYXkodGltZW91dCk7XG4gIGlmICh0aGlzLnVzZU5ld1NhZmFyaSgpKSB7XG4gICAgYXdhaXQgdGhpcy50eXBlQW5kTmF2VG9VcmwoKTtcbiAgfSBlbHNlIGlmIChwYXJzZUludCh0aGlzLmlvc1Nka1ZlcnNpb24sIDEwKSA+PSA3ICYmICF0aGlzLmlzUmVhbERldmljZSgpICYmIHRoaXMub3B0cy5zYWZhcmkpIHtcbiAgICBhd2FpdCB0aGlzLm5hdlRvVmlld1Rocm91Z2hGYXZvcml0ZXMoKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLm5hdlRvVmlld1dpdGhUaXRsZSgvLiovKTtcbiAgfVxufTtcblxuYXN5bmMgZnVuY3Rpb24gb3Blbk5ld1BhZ2UgKCkge1xuICBsZXQgbmV3UGFnZUJ1dHRvbiA9IGF3YWl0IHRoaXMuZmluZEVsZW1lbnQoJ3hwYXRoJywgXCIvL1VJQUJ1dHRvbltjb250YWlucyhAbmFtZSwnTmV3IHBhZ2UnKV1cIik7XG4gIGF3YWl0IHRoaXMubmF0aXZlVGFwKG5ld1BhZ2VCdXR0b24uRUxFTUVOVCk7XG59XG5cbmV4dGVuc2lvbnMudHlwZUFuZE5hdlRvVXJsID0gYXN5bmMgZnVuY3Rpb24gdHlwZUFuZE5hdlRvVXJsICgpIHtcbiAgbGV0IGFkZHJlc3MgPSB0aGlzLm9wdHMuYWRkcmVzcyA/IHRoaXMub3B0cy5hZGRyZXNzIDogJzEyNy4wLjAuMSc7XG4gIHRoaXMuc2V0Q3VycmVudFVybCh0aGlzLmNhcHMuc2FmYXJpSW5pdGlhbFVybCB8fCBgaHR0cDovLyR7YWRkcmVzc306JHt0aGlzLm9wdHMucG9ydH0vd2VsY29tZWApO1xuXG4gIGxldCB0cmllcyA9IDA7XG4gIGNvbnN0IE1BWF9UUklFUyA9IDI7XG4gIGxldCBuYXZpZ2F0ZSA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgb2xkSW1wV2FpdCA9IHRoaXMuaW1wbGljaXRXYWl0TXM7XG4gICAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IDcwMDA7XG5cbiAgICAvLyBmaW5kIHRoZSB1cmwgYmFyLCBhbmQgdGFwIG9uIGl0LiByZXRyeSB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgdHJ5XG4gICAgLy8gdG9vIHNvb24gd2hpbGUgdGhlIHZpZXcgaXMgc3RpbGwgbG9hZGluZ1xuICAgIGxldCBlbCA9IGF3YWl0IHJldHJ5SW50ZXJ2YWwoMywgMTAwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsZW1lbnQoJ2FjY2Vzc2liaWxpdHkgaWQnLCAnVVJMJyk7XG4gICAgfSk7XG4gICAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IG9sZEltcFdhaXQ7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5uYXRpdmVUYXAoZWwuRUxFTUVOVCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoXy5pbmNsdWRlcyhlcnIubWVzc2FnZSwgJ2NvdWxkIG5vdCBiZSB0YXBwZWQnKSkge1xuICAgICAgICBpZiAodHJpZXMrKyA+PSBNQVhfVFJJRVMpIHRocm93IGVycjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuXG4gICAgICAgIC8vIGdlbmVyYWxseSB0aGlzIG1lYW5zIHRoYXQgU2FmYXJpIGlzIGluIHBhZ2Ugdmlld2luZyBtb2RlXG4gICAgICAgIC8vIHNvIHRyeSB0byBvcGVuIGEgbmV3IHBhZ2UgYW5kIHRoZW4gcmVkbyB0aGUgbmF2aWdhdGlvblxuICAgICAgICBhd2FpdCBvcGVuTmV3UGFnZSgpO1xuICAgICAgICByZXR1cm4gYXdhaXQgbmF2aWdhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBnZXQgdGhlIGxhc3QgYWRkcmVzcyBlbGVtZW50IGFuZCBzZXQgdGhlIHVybFxuICAgIHRyeSB7XG4gICAgICBsZXQgZWwgPSBhd2FpdCB0aGlzLmZpbmRFbGVtZW50KCdjbGFzcyBuYW1lJywgJ1VJQVRleHRGaWVsZCcpO1xuICAgICAgYXdhaXQgdGhpcy5zZXRWYWx1ZUltbWVkaWF0ZSh0aGlzLmdldEN1cnJlbnRVcmwoKSwgZWwpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gdGhpcyBpcyBmbGFrZXkgb24gY2VydGFpbiBzeXN0ZW1zIHNvIHdlIHJldHJ5IHVudGlsIHdlIGdldCBzb21ldGhpbmdcbiAgICAgIC8vIGlvcyBzaW1zOiBzYWZhcmkgb3BlbnMgYnV0IHRoZSB0ZXh0IGZpZWxkIGNhbid0IGJlIGZvdW5kXG4gICAgICBpZiAodHJpZXMrKyA+PSBNQVhfVFJJRVMpIHRocm93IGVycjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuICAgICAgcmV0dXJuIGF3YWl0IG5hdmlnYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBpdCBoYXBwZW5cbiAgICB0cnkge1xuICAgICAgZWwgPSBhd2FpdCB0aGlzLmZpbmRFbGVtZW50KCdhY2Nlc3NpYmlsaXR5IGlkJywgJ0dvJyk7XG4gICAgICBhd2FpdCB0aGlzLm5hdGl2ZVRhcChlbC5FTEVNRU5UKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChfLmluY2x1ZGVzKGVyci5tZXNzYWdlLCAnY291bGQgbm90IGJlIHRhcHBlZCcpKSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIHN1Ym1pdCBVUkwgYmVjYXVzZSBcXCdHb1xcJyBidXR0b24gY291bGQgbm90IGJlIHRhcHBlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAnUGxlYXNlIG1ha2Ugc3VyZSB5b3VyIGtleWJvYXJkIGlzIHRvZ2dsZWQgb24uJyk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMubmF2VG9WaWV3V2l0aFRpdGxlKHVuZGVmaW5lZCwgbmV3IFJlZ0V4cCh0aGlzLmdldEN1cnJlbnRVcmwoKSwgJ2knKSk7XG5cbiAgICAvLyB3YWl0IGZvciBwYWdlIHRvIGZpbmlzaCBsb2FkaW5nLlxuICAgIGF3YWl0IHRoaXMucmVtb3RlLnBhZ2VVbmxvYWQoKTtcbiAgfTtcbiAgYXdhaXQgbmF2aWdhdGUoKTtcbn07XG5cbmV4dGVuc2lvbnMubmF2VG9WaWV3VGhyb3VnaEZhdm9yaXRlcyA9IGFzeW5jIGZ1bmN0aW9uIG5hdlRvVmlld1Rocm91Z2hGYXZvcml0ZXMgKCkge1xuICBsb2dnZXIuZGVidWcoJ1dlIGFyZSBvbiBpT1M3KyBzaW11bGF0b3I6IGNsaWNraW5nIGFwcGxlIGJ1dHRvbiB0byBnZXQgaW50byBhIHdlYnZpZXcnKTtcbiAgbGV0IG9sZEltcFdhaXQgPSB0aGlzLmltcGxpY2l0V2FpdE1zO1xuICB0aGlzLmltcGxpY2l0V2FpdE1zID0gNzAwMDsgLy8gd2FpdCA3cyBmb3IgYXBwbGUgYnV0dG9uIHRvIGV4aXN0XG5cbiAgbGV0IGVsO1xuICB0cnkge1xuICAgIGVsID0gYXdhaXQgdGhpcy5maW5kRWxlbWVudCgneHBhdGgnLCAnLy9VSUFTY3JvbGxWaWV3WzFdL1VJQUJ1dHRvblsxXScpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsZXQgbXNnID0gJ0NvdWxkIG5vdCBmaW5kIGJ1dHRvbiB0byBjbGljayB0byBnZXQgaW50byB3ZWJ2aWV3LiAnICtcbiAgICAgICAgICAgICAgJ1Byb2NlZWRpbmcgb24gdGhlIGFzc3VtcHRpb24gd2UgaGF2ZSBhIHdvcmtpbmcgb25lLic7XG4gICAgbG9nZ2VyLmVycm9yKG1zZyk7XG4gICAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IG9sZEltcFdhaXQ7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMubmF2VG9WaWV3V2l0aFRpdGxlKC8uKi9pKTtcbiAgfVxuICB0aGlzLmltcGxpY2l0V2FpdE1zID0gb2xkSW1wV2FpdDtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLm5hdGl2ZVRhcChlbC5FTEVNRU5UKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbGV0IG1zZyA9ICdDb3VsZCBub3QgY2xpY2sgYnV0dG9uIHRvIGdldCBpbnRvIHdlYnZpZXcuICcgK1xuICAgICAgICAgICAgICAnUHJvY2VlZGluZyBvbiB0aGUgYXNzdW1wdGlvbiB3ZSBoYXZlIGEgd29ya2luZyBvbmUuJztcbiAgICBsb2dnZXIuZXJyb3IobXNnKTtcbiAgfVxuICBhd2FpdCB0aGlzLm5hdlRvVmlld1dpdGhUaXRsZSgvYXBwbGUvaSk7XG59O1xuXG5leHRlbnNpb25zLm5hdlRvVmlld1dpdGhUaXRsZSA9IGFzeW5jIGZ1bmN0aW9uIG5hdlRvVmlld1dpdGhUaXRsZSAodGl0bGVSZWdleCwgdXJsUmVnRXhwKSB7XG4gIGxvZ2dlci5kZWJ1ZygnTmF2aWdhdGluZyB0byBtb3N0IHJlY2VudGx5IG9wZW5lZCB3ZWJ2aWV3Jyk7XG4gIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gIGxldCBzcGluVGltZSA9IDUwMDtcbiAgbGV0IHNwaW5IYW5kbGVzID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCByZXM7XG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IGF3YWl0IHRoaXMuZ2V0TGF0ZXN0V2Vidmlld0NvbnRleHRGb3JUaXRsZSh0aXRsZVJlZ2V4IHx8IHVybFJlZ0V4cCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoIWVyci5tZXNzYWdlLmluY2x1ZGVzKCdDb3VsZCBub3QgY29ubmVjdCB0byBhIHZhbGlkIGFwcCBhZnRlcicpKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBDb3VsZCBub3QgbmF2aWdhdGUgdG8gd2VidmlldyEgRXJyOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICBlcnJvci5zdGFjayArPSBgXFxuQ2F1c2VkIGJ5OiAke2Vyci5zdGFja31gO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5kZWJ1ZygnQ291bGQgbm90IG5hdmlnYXRlIHRvIHdlYnZpZXcuIFJldHJ5aW5nIGlmIHBvc3NpYmxlLicpO1xuICAgIH1cbiAgICBpZiAocmVzKSB7XG4gICAgICBsZXQgbGF0ZXN0V2luZG93ID0gcmVzO1xuICAgICAgbG9nZ2VyLmRlYnVnKGBQaWNraW5nIHdlYnZpZXcgJyR7bGF0ZXN0V2luZG93fSdgKTtcbiAgICAgIGF3YWl0IHRoaXMuc2V0Q29udGV4dChsYXRlc3RXaW5kb3cpO1xuICAgICAgYXdhaXQgdGhpcy5yZW1vdGUuY2FuY2VsUGFnZUxvYWQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBubyB3ZWJ2aWV3IHdhcyBmb3VuZFxuICAgIGlmICgoRGF0ZS5ub3coKSAtIHN0YXJ0KSA+PSA5MDAwMCkge1xuICAgICAgLy8gdG9vIHNsb3csIGdldCBvdXRcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IG5hdmlnYXRlIHRvIHdlYnZpZXc7IHRoZXJlIGFyZSBub25lIScpO1xuICAgIH1cblxuICAgIGxvZ2dlci53YXJuKCdDb3VsZCBub3QgZmluZCBhbnkgd2Vidmlld3MgeWV0LCByZWZyZXNoaW5nL3JldHJ5aW5nJyk7XG4gICAgaWYgKHRoaXMuaXNSZWFsRGV2aWNlKCkgfHwgIXRoaXMub3B0cy5zYWZhcmkpIHtcbiAgICAgIC8vIG9uIGEgcmVhbCBkZXZpY2UsIHdoZW4gbm90IHVzaW5nIFNhZmFyaSwgd2UganVzdCB3YW50IHRvIHRyeSBhZ2FpblxuICAgICAgYXdhaXQgQi5kZWxheShzcGluVGltZSk7XG4gICAgICByZXR1cm4gYXdhaXQgc3BpbkhhbmRsZXMoKTtcbiAgICB9XG5cbiAgICAvLyBmaW5kIHRoZSByZWxvYWQgYnV0dG9uIGFuZCB0YXAgaXQsIGlmIHBvc3NpYmxlXG4gICAgbGV0IGVsZW1lbnQ7XG4gICAgdHJ5IHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnRmluZGluZyBhbmQgdGFwcGluZyByZWxvYWQgYnV0dG9uJyk7XG4gICAgICBlbGVtZW50ID0gYXdhaXQgdGhpcy5maW5kVUlFbGVtZW50T3JFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsICdSZWxvYWRCdXR0b24nLCAnJywgZmFsc2UpO1xuICAgICAgYXdhaXQgdGhpcy5uYXRpdmVUYXAoZWxlbWVudC5FTEVNRU5UKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci53YXJuKGBFcnJvciBmaW5kaW5nIGFuZCB0YXBwaW5nIHJlbG9hZCBidXR0b246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICBsb2dnZXIud2FybignUmV0cnlpbmcuJyk7XG4gICAgICBhd2FpdCBCLmRlbGF5KHNwaW5UaW1lKTtcbiAgICB9XG5cbiAgICAvLyB0cnkgaXQgYWxsIGFnYWluXG4gICAgcmV0dXJuIGF3YWl0IHNwaW5IYW5kbGVzKCk7XG4gIH07XG4gIGF3YWl0IHNwaW5IYW5kbGVzKCk7XG59O1xuXG5oZWxwZXJzLmNsb3NlQWxlcnRCZWZvcmVUZXN0ID0gYXN5bmMgZnVuY3Rpb24gY2xvc2VBbGVydEJlZm9yZVRlc3QgKCkge1xuICBsZXQgcHJlc2VudCA9IGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKCdhdS5hbGVydElzUHJlc2VudCgpJyk7XG4gIGlmICghcHJlc2VudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxvZ2dlci5kZWJ1ZygnQWxlcnQgcHJlc2VudCBiZWZvcmUgc3RhcnRpbmcgdGVzdCwgbGV0IHVzIGJhbmlzaCBpdCcpO1xuICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZCgnYXUuZGlzbWlzc0FsZXJ0KCknKTtcbiAgbG9nZ2VyLmRlYnVnKCdBbGVydCBiYW5pc2hlZCEnKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5oZWxwZXJzLnN0b3BSZW1vdGUgPSBhc3luYyBmdW5jdGlvbiBzdG9wUmVtb3RlIChjbG9zZVdpbmRvd0JlZm9yZURpc2Nvbm5lY3RpbmcgPSBmYWxzZSkge1xuICBpZiAoIXRoaXMucmVtb3RlKSB7XG4gICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coJ1RyaWVkIHRvIGxlYXZlIGEgd2ViIGZyYW1lIGJ1dCB3ZXJlIG5vdCBpbiBvbmUnKTtcbiAgfVxuXG4gIGlmIChjbG9zZVdpbmRvd0JlZm9yZURpc2Nvbm5lY3RpbmcpIHtcbiAgICBhd2FpdCB0aGlzLmNsb3NlV2luZG93KCk7XG4gIH1cbiAgYXdhaXQgdGhpcy5yZW1vdGUuZGlzY29ubmVjdCgpO1xuICB0aGlzLmN1ckNvbnRleHQgPSBudWxsO1xuICB0aGlzLmN1cldlYkZyYW1lcyA9IFtdO1xuICB0aGlzLmN1cldlYkNvb3JkcyA9IG51bGw7XG4gIHRoaXMucmVtb3RlID0gbnVsbDtcbn07XG5cbmhlbHBlcnMuaXNXZWJDb250ZXh0ID0gZnVuY3Rpb24gaXNXZWJDb250ZXh0ICgpIHtcbiAgcmV0dXJuICEhdGhpcy5jdXJDb250ZXh0ICYmIHRoaXMuY3VyQ29udGV4dCAhPT0gTkFUSVZFX1dJTjtcbn07XG5cbmhlbHBlcnMuc2V0Q3VycmVudFVybCA9IGZ1bmN0aW9uIHNldEN1cnJlbnRVcmwgKHVybCkge1xuICB0aGlzLl9jdXJyZW50VXJsID0gdXJsO1xufTtcblxuaGVscGVycy5nZXRDdXJyZW50VXJsID0gZnVuY3Rpb24gZ2V0Q3VycmVudFVybCAoKSB7XG4gIHJldHVybiB0aGlzLl9jdXJyZW50VXJsO1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzLCBOQVRJVkVfV0lOLCBXRUJWSUVXX1dJTiwgV0VCVklFV19CQVNFIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
