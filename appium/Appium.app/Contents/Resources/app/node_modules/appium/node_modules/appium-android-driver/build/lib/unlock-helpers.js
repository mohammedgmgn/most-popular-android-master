"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.FINGERPRINT_UNLOCK = exports.PATTERN_UNLOCK = exports.PASSWORD_UNLOCK = exports.PIN_UNLOCK = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

const PIN_UNLOCK = 'pin';
exports.PIN_UNLOCK = PIN_UNLOCK;
const PASSWORD_UNLOCK = 'password';
exports.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
const PATTERN_UNLOCK = 'pattern';
exports.PATTERN_UNLOCK = PATTERN_UNLOCK;
const FINGERPRINT_UNLOCK = 'fingerprint';
exports.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
const UNLOCK_TYPES = [PIN_UNLOCK, PASSWORD_UNLOCK, PATTERN_UNLOCK, FINGERPRINT_UNLOCK];
const KEYCODE_NUMPAD_ENTER = 66;
const KEYCODE_POWER = 26;
const KEYCODE_WAKEUP = 224;
const UNLOCK_WAIT_TIME = 100;
const HIDE_KEYBOARD_WAIT_TIME = 100;
const INPUT_KEYS_WAIT_TIME = 100;
let helpers = {};
exports.helpers = helpers;

helpers.isValidUnlockType = function (type) {
  return UNLOCK_TYPES.indexOf(type) !== -1;
};

helpers.isValidKey = function (type, key) {
  if (_lodash.default.isUndefined(key)) {
    return false;
  }

  if (type === PIN_UNLOCK || type === FINGERPRINT_UNLOCK) {
    return /^[0-9]+$/.test(key.trim());
  }

  if (type === PATTERN_UNLOCK) {
    if (!/^[1-9]{2,9}$/.test(key.trim())) {
      return false;
    }

    return !/([1-9]).*?\1/.test(key.trim());
  }

  if (type === PASSWORD_UNLOCK) {
    return /.{4,}/g.test(key);
  }

  throw new Error(`Invalid unlock type ${type}`);
};

helpers.dismissKeyguard = async function (driver, adb) {
  _logger.default.info('Waking up the device to unlock it');

  await driver.pressKeyCode(KEYCODE_POWER);
  await driver.pressKeyCode(KEYCODE_WAKEUP);
  let isKeyboardShown = await driver.isKeyboardShown();

  if (isKeyboardShown) {
    await driver.hideKeyboard();
    await (0, _asyncbox.sleep)(HIDE_KEYBOARD_WAIT_TIME);
  }

  _logger.default.info('Dismiss notifications from unlock view');

  await adb.shell(['service', 'call', 'notification', '1']);
  await adb.back();

  if ((await adb.getApiLevel()) > 21) {
    _logger.default.info('Trying to dismiss keyguard');

    await adb.shell(['wm', 'dismiss-keyguard']);
    return;
  }

  _logger.default.info('Swiping up to dismiss keyguard');

  await helpers.swipeUp(driver);
};

helpers.swipeUp = async function (driver) {
  let windowSize = await driver.getWindowSize();
  let x0 = parseInt(windowSize.x / 2, 10);
  let y0 = windowSize.y - 10;
  let yP = 100;
  let actions = [{
    action: 'press',
    options: {
      element: null,
      x: x0,
      y: y0
    }
  }, {
    action: 'moveTo',
    options: {
      element: null,
      x: x0,
      y: yP
    }
  }, {
    action: 'release'
  }];
  await driver.performTouch(actions);
};

helpers.encodePassword = function (key) {
  return key.replace(/\s/ig, '%s');
};

helpers.stringKeyToArr = function (key) {
  return key.trim().replace(/\s+/g, '').split(/\s*/);
};

helpers.fingerprintUnlock = async function (adb, driver, capabilities) {
  if ((await adb.getApiLevel()) < 23) {
    throw new Error('Fingerprint unlock only works for Android 6+ emulators');
  }

  await adb.fingerprint(capabilities.unlockKey);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.pinUnlock = async function (adb, driver, capabilities) {
  _logger.default.info(`Trying to unlock device using pin ${capabilities.unlockKey}`);

  await helpers.dismissKeyguard(driver, adb);
  let keys = helpers.stringKeyToArr(capabilities.unlockKey);

  if ((await adb.getApiLevel()) >= 21) {
    let els = await driver.findElOrEls('id', 'com.android.systemui:id/digit_text', true);

    if (_lodash.default.isEmpty(els)) {
      throw new Error('Error finding unlock pin buttons!');
    }

    let pins = {};

    for (let el of els) {
      let text = await driver.getAttribute('text', _appiumSupport.util.unwrapElement(el));
      pins[text] = el;
    }

    for (let pin of keys) {
      let el = pins[pin];
      await driver.click(_appiumSupport.util.unwrapElement(el));
    }
  } else {
    for (let pin of keys) {
      let el = await driver.findElOrEls('id', `com.android.keyguard:id/key${pin}`, false);

      if (el === null) {
        throw new Error(`Error finding unlock pin '${pin}' button!`);
      }

      await driver.click(_appiumSupport.util.unwrapElement(el));
    }
  }

  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);

  if (await adb.isScreenLocked()) {
    await driver.pressKeyCode(KEYCODE_NUMPAD_ENTER);
    await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
  }
};

helpers.passwordUnlock = async function (adb, driver, capabilities) {
  _logger.default.info(`Trying to unlock device using password ${capabilities.unlockKey}`);

  await helpers.dismissKeyguard(driver, adb);
  let key = capabilities.unlockKey;
  key = helpers.encodePassword(key);
  await adb.shell(['input', 'text', key]);
  await (0, _asyncbox.sleep)(INPUT_KEYS_WAIT_TIME);
  await adb.shell(['input', 'keyevent', KEYCODE_NUMPAD_ENTER]);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.getPatternKeyPosition = function (key, initPos, piece) {
  const cols = 3;
  const pins = 9;

  let xPos = (key, x, piece) => {
    return Math.round(x + (key % cols || cols) * piece - piece / 2);
  };

  let yPos = (key, y, piece) => {
    return Math.round(y + (Math.ceil((key % pins || pins) / cols) * piece - piece / 2));
  };

  return {
    x: xPos(key, initPos.x, piece),
    y: yPos(key, initPos.y, piece)
  };
};

helpers.getPatternActions = function (keys, initPos, piece) {
  let actions = [];
  let lastPos;

  for (let key of keys) {
    let keyPos = helpers.getPatternKeyPosition(key, initPos, piece);

    if (key === keys[0]) {
      actions.push({
        action: 'press',
        options: {
          element: null,
          x: keyPos.x,
          y: keyPos.y
        }
      });
      lastPos = keyPos;
      continue;
    }

    let moveTo = {
      x: 0,
      y: 0
    };
    let diffX = keyPos.x - lastPos.x;

    if (diffX > 0) {
      moveTo.x = piece;

      if (Math.abs(diffX) > piece) {
        moveTo.x += piece;
      }
    } else if (diffX < 0) {
      moveTo.x = -1 * piece;

      if (Math.abs(diffX) > piece) {
        moveTo.x -= piece;
      }
    }

    let diffY = keyPos.y - lastPos.y;

    if (diffY > 0) {
      moveTo.y = piece;

      if (Math.abs(diffY) > piece) {
        moveTo.y += piece;
      }
    } else if (diffY < 0) {
      moveTo.y = -1 * piece;

      if (Math.abs(diffY) > piece) {
        moveTo.y -= piece;
      }
    }

    actions.push({
      action: 'moveTo',
      options: {
        element: null,
        x: moveTo.x + lastPos.x,
        y: moveTo.y + lastPos.y
      }
    });
    lastPos = keyPos;
  }

  actions.push({
    action: 'release'
  });
  return actions;
};

helpers.patternUnlock = async function (adb, driver, capabilities) {
  _logger.default.info(`Trying to unlock device using pattern ${capabilities.unlockKey}`);

  await helpers.dismissKeyguard(driver, adb);
  let keys = helpers.stringKeyToArr(capabilities.unlockKey);
  let apiLevel = await adb.getApiLevel();
  let el = await driver.findElOrEls('id', `com.android.${apiLevel >= 21 ? 'systemui' : 'keyguard'}:id/lockPatternView`, false);
  let initPos = await driver.getLocation(_appiumSupport.util.unwrapElement(el));
  let size = await driver.getSize(_appiumSupport.util.unwrapElement(el));
  let actions = helpers.getPatternActions(keys, initPos, size.width / 3);
  await driver.performTouch(actions);
  await (0, _asyncbox.sleep)(UNLOCK_WAIT_TIME);
};

helpers.PIN_UNLOCK = PIN_UNLOCK;
helpers.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
helpers.PATTERN_UNLOCK = PATTERN_UNLOCK;
helpers.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91bmxvY2staGVscGVycy5qcyJdLCJuYW1lcyI6WyJQSU5fVU5MT0NLIiwiUEFTU1dPUkRfVU5MT0NLIiwiUEFUVEVSTl9VTkxPQ0siLCJGSU5HRVJQUklOVF9VTkxPQ0siLCJVTkxPQ0tfVFlQRVMiLCJLRVlDT0RFX05VTVBBRF9FTlRFUiIsIktFWUNPREVfUE9XRVIiLCJLRVlDT0RFX1dBS0VVUCIsIlVOTE9DS19XQUlUX1RJTUUiLCJISURFX0tFWUJPQVJEX1dBSVRfVElNRSIsIklOUFVUX0tFWVNfV0FJVF9USU1FIiwiaGVscGVycyIsImlzVmFsaWRVbmxvY2tUeXBlIiwidHlwZSIsImluZGV4T2YiLCJpc1ZhbGlkS2V5Iiwia2V5IiwiXyIsImlzVW5kZWZpbmVkIiwidGVzdCIsInRyaW0iLCJFcnJvciIsImRpc21pc3NLZXlndWFyZCIsImRyaXZlciIsImFkYiIsImxvZ2dlciIsImluZm8iLCJwcmVzc0tleUNvZGUiLCJpc0tleWJvYXJkU2hvd24iLCJoaWRlS2V5Ym9hcmQiLCJzaGVsbCIsImJhY2siLCJnZXRBcGlMZXZlbCIsInN3aXBlVXAiLCJ3aW5kb3dTaXplIiwiZ2V0V2luZG93U2l6ZSIsIngwIiwicGFyc2VJbnQiLCJ4IiwieTAiLCJ5IiwieVAiLCJhY3Rpb25zIiwiYWN0aW9uIiwib3B0aW9ucyIsImVsZW1lbnQiLCJwZXJmb3JtVG91Y2giLCJlbmNvZGVQYXNzd29yZCIsInJlcGxhY2UiLCJzdHJpbmdLZXlUb0FyciIsInNwbGl0IiwiZmluZ2VycHJpbnRVbmxvY2siLCJjYXBhYmlsaXRpZXMiLCJmaW5nZXJwcmludCIsInVubG9ja0tleSIsInBpblVubG9jayIsImtleXMiLCJlbHMiLCJmaW5kRWxPckVscyIsImlzRW1wdHkiLCJwaW5zIiwiZWwiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwidXRpbCIsInVud3JhcEVsZW1lbnQiLCJwaW4iLCJjbGljayIsImlzU2NyZWVuTG9ja2VkIiwicGFzc3dvcmRVbmxvY2siLCJnZXRQYXR0ZXJuS2V5UG9zaXRpb24iLCJpbml0UG9zIiwicGllY2UiLCJjb2xzIiwieFBvcyIsIk1hdGgiLCJyb3VuZCIsInlQb3MiLCJjZWlsIiwiZ2V0UGF0dGVybkFjdGlvbnMiLCJsYXN0UG9zIiwia2V5UG9zIiwicHVzaCIsIm1vdmVUbyIsImRpZmZYIiwiYWJzIiwiZGlmZlkiLCJwYXR0ZXJuVW5sb2NrIiwiYXBpTGV2ZWwiLCJnZXRMb2NhdGlvbiIsInNpemUiLCJnZXRTaXplIiwid2lkdGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsVUFBVSxHQUFHLEtBQW5COztBQUNBLE1BQU1DLGVBQWUsR0FBRyxVQUF4Qjs7QUFDQSxNQUFNQyxjQUFjLEdBQUcsU0FBdkI7O0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsYUFBM0I7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHLENBQUNKLFVBQUQsRUFBYUMsZUFBYixFQUE4QkMsY0FBOUIsRUFBOENDLGtCQUE5QyxDQUFyQjtBQUNBLE1BQU1FLG9CQUFvQixHQUFHLEVBQTdCO0FBQ0EsTUFBTUMsYUFBYSxHQUFHLEVBQXRCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLEdBQXZCO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsR0FBekI7QUFDQSxNQUFNQyx1QkFBdUIsR0FBRyxHQUFoQztBQUNBLE1BQU1DLG9CQUFvQixHQUFHLEdBQTdCO0FBRUEsSUFBSUMsT0FBTyxHQUFHLEVBQWQ7OztBQUNBQSxPQUFPLENBQUNDLGlCQUFSLEdBQTRCLFVBQVVDLElBQVYsRUFBZ0I7QUFDMUMsU0FBT1QsWUFBWSxDQUFDVSxPQUFiLENBQXFCRCxJQUFyQixNQUErQixDQUFDLENBQXZDO0FBQ0QsQ0FGRDs7QUFJQUYsT0FBTyxDQUFDSSxVQUFSLEdBQXFCLFVBQVVGLElBQVYsRUFBZ0JHLEdBQWhCLEVBQXFCO0FBQ3hDLE1BQUlDLGdCQUFFQyxXQUFGLENBQWNGLEdBQWQsQ0FBSixFQUF3QjtBQUN0QixXQUFPLEtBQVA7QUFDRDs7QUFD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LENBQUNzQyxjQUFSLENBQXVCRyxZQUFZLENBQUNFLFNBQXBDLENBQVg7QUFVQSxNQUFJa0MsUUFBUSxHQUFHLE1BQU1oRSxHQUFHLENBQUNRLFdBQUosRUFBckI7QUFDQSxNQUFJNkIsRUFBRSxHQUFHLE1BQU10QyxNQUFNLENBQUNtQyxXQUFQLENBQW1CLElBQW5CLEVBQ1osZUFBYzhCLFFBQVEsSUFBSSxFQUFaLEdBQWlCLFVBQWpCLEdBQThCLFVBQVcscUJBRDNDLEVBRWIsS0FGYSxDQUFmO0FBSUEsTUFBSWpCLE9BQU8sR0FBRyxNQUFNaEQsTUFBTSxDQUFDa0UsV0FBUCxDQUFtQnpCLG9CQUFLQyxhQUFMLENBQW1CSixFQUFuQixDQUFuQixDQUFwQjtBQUNBLE1BQUk2QixJQUFJLEdBQUcsTUFBTW5FLE1BQU0sQ0FBQ29FLE9BQVAsQ0FBZTNCLG9CQUFLQyxhQUFMLENBQW1CSixFQUFuQixDQUFmLENBQWpCO0FBRUEsTUFBSW5CLE9BQU8sR0FBRy9CLE9BQU8sQ0FBQ29FLGlCQUFSLENBQTBCdkIsSUFBMUIsRUFBZ0NlLE9BQWhDLEVBQXlDbUIsSUFBSSxDQUFDRSxLQUFMLEdBQWEsQ0FBdEQsQ0FBZDtBQUVBLFFBQU1yRSxNQUFNLENBQUN1QixZQUFQLENBQW9CSixPQUFwQixDQUFOO0FBRUEsUUFBTSxxQkFBTWxDLGdCQUFOLENBQU47QUFDRCxDQTFCRDs7QUE0QkFHLE9BQU8sQ0FBQ1gsVUFBUixHQUFxQkEsVUFBckI7QUFDQVcsT0FBTyxDQUFDVixlQUFSLEdBQTBCQSxlQUExQjtBQUNBVSxPQUFPLENBQUNULGNBQVIsR0FBeUJBLGNBQXpCO0FBQ0FTLE9BQU8sQ0FBQ1Isa0JBQVIsR0FBNkJBLGtCQUE3QjtlQUdlUSxPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5jb25zdCBQSU5fVU5MT0NLID0gJ3Bpbic7XG5jb25zdCBQQVNTV09SRF9VTkxPQ0sgPSAncGFzc3dvcmQnO1xuY29uc3QgUEFUVEVSTl9VTkxPQ0sgPSAncGF0dGVybic7XG5jb25zdCBGSU5HRVJQUklOVF9VTkxPQ0sgPSAnZmluZ2VycHJpbnQnO1xuY29uc3QgVU5MT0NLX1RZUEVTID0gW1BJTl9VTkxPQ0ssIFBBU1NXT1JEX1VOTE9DSywgUEFUVEVSTl9VTkxPQ0ssIEZJTkdFUlBSSU5UX1VOTE9DS107XG5jb25zdCBLRVlDT0RFX05VTVBBRF9FTlRFUiA9IDY2O1xuY29uc3QgS0VZQ09ERV9QT1dFUiA9IDI2O1xuY29uc3QgS0VZQ09ERV9XQUtFVVAgPSAyMjQ7IC8vIENhbiB3b3JrIG92ZXIgQVBJIExldmVsIDIwXG5jb25zdCBVTkxPQ0tfV0FJVF9USU1FID0gMTAwO1xuY29uc3QgSElERV9LRVlCT0FSRF9XQUlUX1RJTUUgPSAxMDA7XG5jb25zdCBJTlBVVF9LRVlTX1dBSVRfVElNRSA9IDEwMDtcblxubGV0IGhlbHBlcnMgPSB7fTtcbmhlbHBlcnMuaXNWYWxpZFVubG9ja1R5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICByZXR1cm4gVU5MT0NLX1RZUEVTLmluZGV4T2YodHlwZSkgIT09IC0xO1xufTtcblxuaGVscGVycy5pc1ZhbGlkS2V5ID0gZnVuY3Rpb24gKHR5cGUsIGtleSkge1xuICBpZiAoXy5pc1VuZGVmaW5lZChrZXkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlID09PSBQSU5fVU5MT0NLIHx8IHR5cGUgPT09IEZJTkdFUlBSSU5UX1VOTE9DSykge1xuICAgIHJldHVybiAvXlswLTldKyQvLnRlc3Qoa2V5LnRyaW0oKSk7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFBBVFRFUk5fVU5MT0NLKSB7XG4gICAgaWYgKCEvXlsxLTldezIsOX0kLy50ZXN0KGtleS50cmltKCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAhKC8oWzEtOV0pLio/XFwxLy50ZXN0KGtleS50cmltKCkpKTtcbiAgfVxuICAvLyBEb250IHRyaW0gcGFzc3dvcmQga2V5LCB5b3UgY2FuIHVzZSBibGFuayBzcGFjZXMgaW4geW91ciBhbmRyb2lkIHBhc3N3b3JkXG4gIC8vIMKvXFxfKOODhClfL8KvXG4gIGlmICh0eXBlID09PSBQQVNTV09SRF9VTkxPQ0spIHtcbiAgICByZXR1cm4gLy57NCx9L2cudGVzdChrZXkpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB1bmxvY2sgdHlwZSAke3R5cGV9YCk7XG59O1xuXG5oZWxwZXJzLmRpc21pc3NLZXlndWFyZCA9IGFzeW5jIGZ1bmN0aW9uIChkcml2ZXIsIGFkYikge1xuICBsb2dnZXIuaW5mbygnV2FraW5nIHVwIHRoZSBkZXZpY2UgdG8gdW5sb2NrIGl0Jyk7XG4gIC8vIFNjcmVlbiBvZmYgb25jZSB0byBmb3JjZSBwcmUtaW5wdXR0ZWQgdGV4dCBmaWVsZCBjbGVhbiBhZnRlciB3YWtlLXVwXG4gIC8vIEp1c3Qgc2NyZWVuIG9uIGlmIHRoZSBzY3JlZW4gZGVmYXVsdHMgb2ZmXG4gIGF3YWl0IGRyaXZlci5wcmVzc0tleUNvZGUoS0VZQ09ERV9QT1dFUik7XG4gIGF3YWl0IGRyaXZlci5wcmVzc0tleUNvZGUoS0VZQ09ERV9XQUtFVVApO1xuICBsZXQgaXNLZXlib2FyZFNob3duID0gYXdhaXQgZHJpdmVyLmlzS2V5Ym9hcmRTaG93bigpO1xuICBpZiAoaXNLZXlib2FyZFNob3duKSB7XG4gICAgYXdhaXQgZHJpdmVyLmhpZGVLZXlib2FyZCgpO1xuICAgIC8vIFdhaXRzIGEgYml0IGZvciB0aGUga2V5Ym9hcmQgdG8gaGlkZVxuICAgIGF3YWl0IHNsZWVwKEhJREVfS0VZQk9BUkRfV0FJVF9USU1FKTtcbiAgfVxuICAvLyBkaXNtaXNzIG5vdGlmaWNhdGlvbnNcbiAgbG9nZ2VyLmluZm8oJ0Rpc21pc3Mgbm90aWZpY2F0aW9ucyBmcm9tIHVubG9jayB2aWV3Jyk7XG4gIGF3YWl0IGFkYi5zaGVsbChbJ3NlcnZpY2UnLCAnY2FsbCcsICdub3RpZmljYXRpb24nLCAnMSddKTtcbiAgYXdhaXQgYWRiLmJhY2soKTtcbiAgaWYgKGF3YWl0IGFkYi5nZXRBcGlMZXZlbCgpID4gMjEpIHtcbiAgICBsb2dnZXIuaW5mbygnVHJ5aW5nIHRvIGRpc21pc3Mga2V5Z3VhcmQnKTtcbiAgICBhd2FpdCBhZGIuc2hlbGwoWyd3bScsICdkaXNtaXNzLWtleWd1YXJkJ10pO1xuICAgIHJldHVybjtcbiAgfVxuICBsb2dnZXIuaW5mbygnU3dpcGluZyB1cCB0byBkaXNtaXNzIGtleWd1YXJkJyk7XG4gIGF3YWl0IGhlbHBlcnMuc3dpcGVVcChkcml2ZXIpO1xufTtcblxuaGVscGVycy5zd2lwZVVwID0gYXN5bmMgZnVuY3Rpb24gKGRyaXZlcikge1xuICBsZXQgd2luZG93U2l6ZSA9IGF3YWl0IGRyaXZlci5nZXRXaW5kb3dTaXplKCk7XG4gIGxldCB4MCA9IHBhcnNlSW50KHdpbmRvd1NpemUueCAvIDIsIDEwKTtcbiAgbGV0IHkwID0gd2luZG93U2l6ZS55IC0gMTA7XG4gIGxldCB5UCA9IDEwMDtcbiAgbGV0IGFjdGlvbnMgPSBbXG4gICAge2FjdGlvbjogJ3ByZXNzJywgb3B0aW9uczoge2VsZW1lbnQ6IG51bGwsIHg6IHgwLCB5OiB5MH19LFxuICAgIHthY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7ZWxlbWVudDogbnVsbCwgeDogeDAsIHk6IHlQfX0sXG4gICAge2FjdGlvbjogJ3JlbGVhc2UnfVxuICBdO1xuICBhd2FpdCBkcml2ZXIucGVyZm9ybVRvdWNoKGFjdGlvbnMpO1xufTtcblxuaGVscGVycy5lbmNvZGVQYXNzd29yZCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKC9cXHMvaWcsICclcycpO1xufTtcblxuaGVscGVycy5zdHJpbmdLZXlUb0FyciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnJykuc3BsaXQoL1xccyovKTtcbn07XG5cbmhlbHBlcnMuZmluZ2VycHJpbnRVbmxvY2sgPSBhc3luYyBmdW5jdGlvbiAoYWRiLCBkcml2ZXIsIGNhcGFiaWxpdGllcykge1xuICBpZiAoYXdhaXQgYWRiLmdldEFwaUxldmVsKCkgPCAyMykge1xuICAgIHRocm93IG5ldyBFcnJvcignRmluZ2VycHJpbnQgdW5sb2NrIG9ubHkgd29ya3MgZm9yIEFuZHJvaWQgNisgZW11bGF0b3JzJyk7XG4gIH1cbiAgYXdhaXQgYWRiLmZpbmdlcnByaW50KGNhcGFiaWxpdGllcy51bmxvY2tLZXkpO1xuICBhd2FpdCBzbGVlcChVTkxPQ0tfV0FJVF9USU1FKTtcbn07XG5cbmhlbHBlcnMucGluVW5sb2NrID0gYXN5bmMgZnVuY3Rpb24gKGFkYiwgZHJpdmVyLCBjYXBhYmlsaXRpZXMpIHtcbiAgbG9nZ2VyLmluZm8oYFRyeWluZyB0byB1bmxvY2sgZGV2aWNlIHVzaW5nIHBpbiAke2NhcGFiaWxpdGllcy51bmxvY2tLZXl9YCk7XG4gIGF3YWl0IGhlbHBlcnMuZGlzbWlzc0tleWd1YXJkKGRyaXZlciwgYWRiKTtcbiAgbGV0IGtleXMgPSBoZWxwZXJzLnN0cmluZ0tleVRvQXJyKGNhcGFiaWxpdGllcy51bmxvY2tLZXkpO1xuICBpZiAoYXdhaXQgYWRiLmdldEFwaUxldmVsKCkgPj0gMjEpIHtcbiAgICBsZXQgZWxzID0gYXdhaXQgZHJpdmVyLmZpbmRFbE9yRWxzKCdpZCcsICdjb20uYW5kcm9pZC5zeXN0ZW11aTppZC9kaWdpdF90ZXh0JywgdHJ1ZSk7XG4gICAgaWYgKF8uaXNFbXB0eShlbHMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGZpbmRpbmcgdW5sb2NrIHBpbiBidXR0b25zIScpO1xuICAgIH1cbiAgICBsZXQgcGlucyA9IHt9O1xuICAgIGZvciAobGV0IGVsIG9mIGVscykge1xuICAgICAgbGV0IHRleHQgPSBhd2FpdCBkcml2ZXIuZ2V0QXR0cmlidXRlKCd0ZXh0JywgdXRpbC51bndyYXBFbGVtZW50KGVsKSk7XG4gICAgICBwaW5zW3RleHRdID0gZWw7XG4gICAgfVxuICAgIGZvciAobGV0IHBpbiBvZiBrZXlzKSB7XG4gICAgICBsZXQgZWwgPSBwaW5zW3Bpbl07XG4gICAgICBhd2FpdCBkcml2ZXIuY2xpY2sodXRpbC51bndyYXBFbGVtZW50KGVsKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IHBpbiBvZiBrZXlzKSB7XG4gICAgICBsZXQgZWwgPSBhd2FpdCBkcml2ZXIuZmluZEVsT3JFbHMoJ2lkJywgYGNvbS5hbmRyb2lkLmtleWd1YXJkOmlkL2tleSR7cGlufWAsIGZhbHNlKTtcbiAgICAgIGlmIChlbCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGZpbmRpbmcgdW5sb2NrIHBpbiAnJHtwaW59JyBidXR0b24hYCk7XG4gICAgICB9XG4gICAgICBhd2FpdCBkcml2ZXIuY2xpY2sodXRpbC51bndyYXBFbGVtZW50KGVsKSk7XG4gICAgfVxuICB9XG4gIC8vIFNvbWUgZGV2aWNlcyBhY2NlcHQgZW50ZXJpbmcgdGhlIGNvZGUgd2l0aG91dCBwcmVzc2luZyB0aGUgRW50ZXIga2V5XG4gIC8vIFdoZW4gSSBydXNoZWQgY29tbWFuZHMgd2l0aG91dCB0aGlzIHdhaXQgYmVmb3JlIHByZXNzS2V5Q29kZSwgcmFyZWx5IFVJMiBzZXZlciBjcmFzaGVkXG4gIGF3YWl0IHNsZWVwKFVOTE9DS19XQUlUX1RJTUUpO1xuICBpZiAoYXdhaXQgYWRiLmlzU2NyZWVuTG9ja2VkKCkpIHtcbiAgICBhd2FpdCBkcml2ZXIucHJlc3NLZXlDb2RlKEtFWUNPREVfTlVNUEFEX0VOVEVSKTtcbiAgICBhd2FpdCBzbGVlcChVTkxPQ0tfV0FJVF9USU1FKTtcbiAgfVxufTtcblxuaGVscGVycy5wYXNzd29yZFVubG9jayA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIGRyaXZlciwgY2FwYWJpbGl0aWVzKSB7XG4gIGxvZ2dlci5pbmZvKGBUcnlpbmcgdG8gdW5sb2NrIGRldmljZSB1c2luZyBwYXNzd29yZCAke2NhcGFiaWxpdGllcy51bmxvY2tLZXl9YCk7XG4gIGF3YWl0IGhlbHBlcnMuZGlzbWlzc0tleWd1YXJkKGRyaXZlciwgYWRiKTtcbiAgbGV0IGtleSA9IGNhcGFiaWxpdGllcy51bmxvY2tLZXk7XG4gIC8vIFJlcGxhY2UgYmxhbmsgc3BhY2VzIHdpdGggJXNcbiAga2V5ID0gaGVscGVycy5lbmNvZGVQYXNzd29yZChrZXkpO1xuICAvLyBXaHkgYWRiID8gSXQgd2FzIGxlc3MgZmxha3lcbiAgYXdhaXQgYWRiLnNoZWxsKFsnaW5wdXQnLCAndGV4dCcsIGtleV0pO1xuICAvLyBXaHkgc2xlZXBzID8gQXZvaWQgc29tZSBmbGFreW5lc3Mgd2FpdGluZyBmb3IgdGhlIGlucHV0IHRvIHJlY2VpdmUgdGhlIGtleXNcbiAgYXdhaXQgc2xlZXAoSU5QVVRfS0VZU19XQUlUX1RJTUUpO1xuICBhd2FpdCBhZGIuc2hlbGwoWydpbnB1dCcsICdrZXlldmVudCcsIEtFWUNPREVfTlVNUEFEX0VOVEVSXSk7XG4gIC8vIFdhaXRzIGEgYml0IGZvciB0aGUgZGV2aWNlIHRvIGJlIHVubG9ja2VkXG4gIGF3YWl0IHNsZWVwKFVOTE9DS19XQUlUX1RJTUUpO1xufTtcblxuaGVscGVycy5nZXRQYXR0ZXJuS2V5UG9zaXRpb24gPSBmdW5jdGlvbiAoa2V5LCBpbml0UG9zLCBwaWVjZSkge1xuICAvKlxuICBIb3cgdGhlIG1hdGggd29ya3M6XG4gIFdlIGhhdmUgOSBidXR0b25zIGRpdmlkZWQgaW4gMyBjb2x1bW5zIGFuZCAzIHJvd3MgaW5zaWRlIHRoZSBsb2NrUGF0dGVyblZpZXcsXG4gIGV2ZXJ5IGJ1dHRvbiBoYXMgYSBwb3NpdGlvbiBvbiB0aGUgc2NyZWVuIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxvY2tQYXR0ZXJuVmlldyBzaW5jZVxuICBpdCBpcyB0aGUgcGFyZW50IHZpZXcgcmlnaHQgYXQgdGhlIG1pZGRsZSBvZiBlYWNoIGNvbHVtbiBvciByb3cuXG4gICovXG4gIGNvbnN0IGNvbHMgPSAzO1xuICBjb25zdCBwaW5zID0gOTtcbiAgbGV0IHhQb3MgPSAoa2V5LCB4LCBwaWVjZSkgPT4ge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHggKyAoKGtleSAlIGNvbHMpIHx8IGNvbHMpICogcGllY2UgLSBwaWVjZSAvIDIpO1xuICB9O1xuICBsZXQgeVBvcyA9IChrZXksIHksIHBpZWNlKSA9PiB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoeSArIChNYXRoLmNlaWwoKChrZXkgJSBwaW5zKSB8fCBwaW5zKSAvIGNvbHMpICogcGllY2UgLSBwaWVjZSAvIDIpKTtcbiAgfTtcbiAgcmV0dXJuIHt4OiB4UG9zKGtleSwgaW5pdFBvcy54LCBwaWVjZSksIHk6IHlQb3Moa2V5LCBpbml0UG9zLnksIHBpZWNlKX07XG59O1xuXG5oZWxwZXJzLmdldFBhdHRlcm5BY3Rpb25zID0gZnVuY3Rpb24gKGtleXMsIGluaXRQb3MsIHBpZWNlKSB7XG4gIGxldCBhY3Rpb25zID0gW107XG4gIGxldCBsYXN0UG9zO1xuICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgIGxldCBrZXlQb3MgPSBoZWxwZXJzLmdldFBhdHRlcm5LZXlQb3NpdGlvbihrZXksIGluaXRQb3MsIHBpZWNlKTtcbiAgICBpZiAoa2V5ID09PSBrZXlzWzBdKSB7XG4gICAgICBhY3Rpb25zLnB1c2goe2FjdGlvbjogJ3ByZXNzJywgb3B0aW9uczoge2VsZW1lbnQ6IG51bGwsIHg6IGtleVBvcy54LCB5OiBrZXlQb3MueX19KTtcbiAgICAgIGxhc3RQb3MgPSBrZXlQb3M7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbGV0IG1vdmVUbyA9IHt4OiAwLCB5OiAwfTtcbiAgICBsZXQgZGlmZlggPSBrZXlQb3MueCAtIGxhc3RQb3MueDtcbiAgICBpZiAoZGlmZlggPiAwKSB7XG4gICAgICBtb3ZlVG8ueCA9IHBpZWNlO1xuICAgICAgaWYgKE1hdGguYWJzKGRpZmZYKSA+IHBpZWNlKSB7XG4gICAgICAgIG1vdmVUby54ICs9IHBpZWNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGlmZlggPCAwKSB7XG4gICAgICBtb3ZlVG8ueCA9IC0xICogcGllY2U7XG4gICAgICBpZiAoTWF0aC5hYnMoZGlmZlgpID4gcGllY2UpIHtcbiAgICAgICAgbW92ZVRvLnggLT0gcGllY2U7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBkaWZmWSA9IGtleVBvcy55IC0gbGFzdFBvcy55O1xuICAgIGlmIChkaWZmWSA+IDApIHtcbiAgICAgIG1vdmVUby55ID0gcGllY2U7XG4gICAgICBpZiAoTWF0aC5hYnMoZGlmZlkpID4gcGllY2UpIHtcbiAgICAgICAgbW92ZVRvLnkgKz0gcGllY2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkaWZmWSA8IDApIHtcbiAgICAgIG1vdmVUby55ID0gLTEgKiBwaWVjZTtcbiAgICAgIGlmIChNYXRoLmFicyhkaWZmWSkgPiBwaWVjZSkge1xuICAgICAgICBtb3ZlVG8ueSAtPSBwaWVjZTtcbiAgICAgIH1cbiAgICB9XG4gICAgYWN0aW9ucy5wdXNoKHthY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7ZWxlbWVudDogbnVsbCwgeDogbW92ZVRvLnggKyBsYXN0UG9zLngsIHk6IG1vdmVUby55ICsgbGFzdFBvcy55fX0pO1xuICAgIGxhc3RQb3MgPSBrZXlQb3M7XG4gIH1cbiAgYWN0aW9ucy5wdXNoKHthY3Rpb246ICdyZWxlYXNlJ30pO1xuICByZXR1cm4gYWN0aW9ucztcbn07XG5cbmhlbHBlcnMucGF0dGVyblVubG9jayA9IGFzeW5jIGZ1bmN0aW9uIChhZGIsIGRyaXZlciwgY2FwYWJpbGl0aWVzKSB7XG4gIGxvZ2dlci5pbmZvKGBUcnlpbmcgdG8gdW5sb2NrIGRldmljZSB1c2luZyBwYXR0ZXJuICR7Y2FwYWJpbGl0aWVzLnVubG9ja0tleX1gKTtcbiAgYXdhaXQgaGVscGVycy5kaXNtaXNzS2V5Z3VhcmQoZHJpdmVyLCBhZGIpO1xuICBsZXQga2V5cyA9IGhlbHBlcnMuc3RyaW5nS2V5VG9BcnIoY2FwYWJpbGl0aWVzLnVubG9ja0tleSk7XG4gIC8qIFdlIHNldCB0aGUgZGV2aWNlIHBhdHRlcm4gYnV0dG9ucyBhcyBudW1iZXIgb2YgYSByZWd1bGFyIHBob25lXG4gICAqICB8IOKAoiDigKIg4oCiIHwgICAgIHwgMSAyIDMgfFxuICAgKiAgfCDigKIg4oCiIOKAoiB8IC0tPiB8IDQgNSA2IHxcbiAgICogIHwg4oCiIOKAoiDigKIgfCAgICAgfCA3IDggOSB8XG5cbiAgVGhlIHBhdHRlcm4gdmlldyBidXR0b25zIGFyZSBub3Qgc2VlaW5nIGJ5IHRoZSB1aWF1dG9tYXRvciBzaW5jZSB0aGV5IGFyZVxuICBpbmNsdWRlZCBpbnNpZGUgYSBGcmFtZUxheW91dCwgc28gd2UgYXJlIGdvaW5nIHRvIHRyeSBjbGlja2luZyBvbiB0aGUgYnV0dG9uc1xuICB1c2luZyB0aGUgcGFyZW50IHZpZXcgYm91bmRzIGFuZCBtYXRoLlxuICAqL1xuICBsZXQgYXBpTGV2ZWwgPSBhd2FpdCBhZGIuZ2V0QXBpTGV2ZWwoKTtcbiAgbGV0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbE9yRWxzKCdpZCcsXG4gICAgYGNvbS5hbmRyb2lkLiR7YXBpTGV2ZWwgPj0gMjEgPyAnc3lzdGVtdWknIDogJ2tleWd1YXJkJ306aWQvbG9ja1BhdHRlcm5WaWV3YCxcbiAgICBmYWxzZVxuICApO1xuICBsZXQgaW5pdFBvcyA9IGF3YWl0IGRyaXZlci5nZXRMb2NhdGlvbih1dGlsLnVud3JhcEVsZW1lbnQoZWwpKTtcbiAgbGV0IHNpemUgPSBhd2FpdCBkcml2ZXIuZ2V0U2l6ZSh1dGlsLnVud3JhcEVsZW1lbnQoZWwpKTtcbiAgLy8gR2V0IGFjdGlvbnMgdG8gcGVyZm9ybVxuICBsZXQgYWN0aW9ucyA9IGhlbHBlcnMuZ2V0UGF0dGVybkFjdGlvbnMoa2V5cywgaW5pdFBvcywgc2l6ZS53aWR0aCAvIDMpO1xuICAvLyBQZXJmb3JtIGdlc3R1cmVcbiAgYXdhaXQgZHJpdmVyLnBlcmZvcm1Ub3VjaChhY3Rpb25zKTtcbiAgLy8gV2FpdHMgYSBiaXQgZm9yIHRoZSBkZXZpY2UgdG8gYmUgdW5sb2NrZWRcbiAgYXdhaXQgc2xlZXAoVU5MT0NLX1dBSVRfVElNRSk7XG59O1xuXG5oZWxwZXJzLlBJTl9VTkxPQ0sgPSBQSU5fVU5MT0NLO1xuaGVscGVycy5QQVNTV09SRF9VTkxPQ0sgPSBQQVNTV09SRF9VTkxPQ0s7XG5oZWxwZXJzLlBBVFRFUk5fVU5MT0NLID0gUEFUVEVSTl9VTkxPQ0s7XG5oZWxwZXJzLkZJTkdFUlBSSU5UX1VOTE9DSyA9IEZJTkdFUlBSSU5UX1VOTE9DSztcblxuZXhwb3J0IHsgUElOX1VOTE9DSywgUEFTU1dPUkRfVU5MT0NLLCBQQVRURVJOX1VOTE9DSywgRklOR0VSUFJJTlRfVU5MT0NLLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBoZWxwZXJzO1xuIl0sImZpbGUiOiJsaWIvdW5sb2NrLWhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
