"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

const APP_EXTENSIONS = ['.apk', '.apks'];
const APP_STATE_NOT_INSTALLED = 0;
const APP_STATE_NOT_RUNNING = 1;
const APP_STATE_RUNNING_IN_BACKGROUND = 3;
const APP_STATE_RUNNING_IN_FOREGROUND = 4;
let commands = {};
exports.commands = commands;

commands.isAppInstalled = async function (appId) {
  return await this.adb.isAppInstalled(appId);
};

commands.queryAppState = async function (appId) {
  _logger.default.info(`Querying the state of '${appId}'`);

  if (!(await this.adb.isAppInstalled(appId))) {
    return APP_STATE_NOT_INSTALLED;
  }

  if (!(await this.adb.processExists(appId))) {
    return APP_STATE_NOT_RUNNING;
  }

  const output = await this.adb.shell(['dumpsys', 'window', 'windows']);

  for (const line of output.split('\n')) {
    if (line.includes(appId) && (line.includes('mCurrentFocus') || line.includes('mFocusedApp'))) {
      return APP_STATE_RUNNING_IN_FOREGROUND;
    }
  }

  return APP_STATE_RUNNING_IN_BACKGROUND;
};

commands.activateApp = async function (appId) {
  const cmd = ['monkey', '-p', appId, '-c', 'android.intent.category.LAUNCHER', '1'];
  let output = '';

  try {
    _logger.default.debug(`Activating '${appId}' with 'adb shell ${cmd.join(' ')}' command`);

    output = await this.adb.shell(cmd);

    _logger.default.debug(`Command stdout: ${output}`);
  } catch (e) {
    _logger.default.errorAndThrow(`Cannot activate '${appId}'. Original error: ${e.message}`);
  }

  if (output.includes('monkey aborted')) {
    _logger.default.errorAndThrow(`Cannot activate '${appId}'. Are you sure it is installed?`);
  }
};

commands.removeApp = async function (appId, options = {}) {
  return await this.adb.uninstallApk(appId, options);
};

commands.terminateApp = async function (appId, options = {}) {
  _logger.default.info(`Terminating '${appId}'`);

  if (!(await this.adb.processExists(appId))) {
    _logger.default.info(`The app '${appId}' is not running`);

    return false;
  }

  await this.adb.forceStop(appId);
  const timeout = _appiumSupport.util.hasValue(options.timeout) && !isNaN(options.timeout) ? parseInt(options.timeout, 10) : 500;

  try {
    await (0, _asyncbox.waitForCondition)(async () => (await this.queryAppState(appId)) <= APP_STATE_NOT_RUNNING, {
      waitMs: timeout,
      intervalMs: 100
    });
  } catch (e) {
    _logger.default.errorAndThrow(`'${appId}' is still running after ${timeout}ms timeout`);
  }

  _logger.default.info(`'${appId}' has been successfully terminated`);

  return true;
};

commands.installApp = async function (appPath, options = {}) {
  const localPath = await this.helpers.configureApp(appPath, APP_EXTENSIONS);
  await this.adb.install(localPath, options);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
