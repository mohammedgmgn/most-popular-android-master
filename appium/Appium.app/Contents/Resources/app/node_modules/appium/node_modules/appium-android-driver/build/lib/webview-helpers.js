"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHROMIUM_WIN = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _asyncbox = require("asyncbox");

const NATIVE_WIN = 'NATIVE_APP';
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = 'WEBVIEW';
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
const WEBVIEW_REGEXP = new RegExp(`@?webview_devtools_remote_(\\d+)`);
const WEBVIEW_PID_REGEXP = new RegExp(`${WEBVIEW_BASE}(\\d+)`);
const CHROMIUM_WIN = 'CHROMIUM';
exports.CHROMIUM_WIN = CHROMIUM_WIN;
const CROSSWALK_SOCKET_SUFFIX = '_devtools_remote';
const CROSSWALK_REGEXP_STRING = `(\\S*)${CROSSWALK_SOCKET_SUFFIX}`;
const CROSSWALK_REGEXP = new RegExp(`@${CROSSWALK_REGEXP_STRING}`);
const CROSSWALK_PROCESS_REGEXP = new RegExp(WEBVIEW_BASE + CROSSWALK_REGEXP_STRING);
let helpers = {};
exports.helpers = helpers;

async function webviewsFromProcs(adb, deviceSocket) {
  let webviews = [];
  let out = await adb.shell(['cat', '/proc/net/unix']);

  for (let line of out.split('\n')) {
    line = line.trim();

    if (deviceSocket) {
      if (line.indexOf(`@${deviceSocket}`) === line.length - deviceSocket.length - 1) {
        if (deviceSocket === 'chrome_devtools_remote') {
          webviews.push(CHROMIUM_WIN);
          continue;
        }
      }
    }

    let webviewPid;
    let crosswalkWebviewSocket;

    if (webviewPid = line.match(WEBVIEW_REGEXP)) {
      webviews.push(`${WEBVIEW_BASE}${webviewPid[1]}`);
    } else if (crosswalkWebviewSocket = line.match(CROSSWALK_REGEXP)) {
      if (deviceSocket) {
        if (crosswalkWebviewSocket[0].slice(1) === deviceSocket) {
          webviews.push(`${WEBVIEW_BASE}${crosswalkWebviewSocket[1]}`);
        }
      } else {
        webviews.push(`${WEBVIEW_BASE}${crosswalkWebviewSocket[1]}${CROSSWALK_SOCKET_SUFFIX}`);
      }
    }
  }

  return _lodash.default.uniq(webviews);
}

helpers.procFromWebview = async function (adb, webview) {
  if (webview.match(WEBVIEW_PID_REGEXP) === null) {
    let processName = webview.match(CROSSWALK_PROCESS_REGEXP);

    if (processName === null) {
      throw new Error(`Could not find process name for webview ${webview}`);
    }

    return processName[1];
  }

  let pid = webview.match(/\d+$/);

  if (!pid) {
    throw new Error(`Could not find PID for webview ${webview}`);
  }

  pid = pid[0];

  _logger.default.debug(`${webview} mapped to pid ${pid}`);

  _logger.default.debug('Getting process name for webview');

  let out = await adb.shell('ps');
  let pkg = 'unknown';
  let lines = out.split(/\r?\n/);
  const fullHeader = lines[0].trim();
  const header = fullHeader.split(/\s+/);
  const pidColumn = header.indexOf('PID');

  for (let line of lines) {
    const entries = line.trim().split(/\s+/);
    const pidEntry = entries[pidColumn];

    if (pidEntry === pid) {
      pkg = _lodash.default.last(entries);

      _logger.default.debug(`Parsed pid: '${pidEntry}' pkg: '${pkg}' from`);

      _logger.default.debug(`    ${fullHeader}`);

      _logger.default.debug(`    ${line}`);

      break;
    }
  }

  _logger.default.debug(`Returning process name: '${pkg}'`);

  return pkg;
};

helpers.getWebviews = async function (adb, deviceSocket) {
  _logger.default.debug('Getting a list of available webviews');

  let webviews = await webviewsFromProcs(adb, deviceSocket);

  if (deviceSocket) {
    return webviews;
  }

  webviews = await (0, _asyncbox.asyncmap)(webviews, async webviewName => {
    let pkg = await helpers.procFromWebview(adb, webviewName);
    return WEBVIEW_BASE + pkg;
  });

  _logger.default.debug(`Found webviews: ${JSON.stringify(webviews)}`);

  return webviews;
};

helpers.decorateChromeOptions = function (caps, opts, deviceId) {
  if (opts.chromeOptions) {
    if (opts.chromeOptions.Arguments) {
      opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];
      delete opts.chromeOptions.Arguments;
    }

    for (let [opt, val] of _lodash.default.toPairs(opts.chromeOptions)) {
      if (_lodash.default.isUndefined(caps.chromeOptions[opt])) {
        caps.chromeOptions[opt] = val;
      } else {
        _logger.default.warn(`Cannot pass option ${caps.chromeOptions[opt]} because ` + 'Appium needs it to make chromeDriver work');
      }
    }
  }

  caps.chromeOptions.androidDeviceSerial = deviceId;
  return caps;
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
